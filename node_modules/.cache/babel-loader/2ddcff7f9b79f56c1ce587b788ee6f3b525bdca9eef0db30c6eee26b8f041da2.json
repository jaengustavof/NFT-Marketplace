{"ast":null,"code":"import _defineProperty from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nvar Encoder = /*#__PURE__*/function () {\n  function Encoder(name, prefix, baseEncode) {\n    _classCallCheck(this, Encoder);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(bytes) {\n      if (bytes instanceof Uint8Array) {\n        return \"\".concat(this.prefix).concat(this.baseEncode(bytes));\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n  return Encoder;\n}();\nvar Decoder = /*#__PURE__*/function () {\n  function Decoder(name, prefix, baseDecode) {\n    _classCallCheck(this, Decoder);\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  _createClass(Decoder, [{\n    key: \"decode\",\n    value: function decode(text) {\n      if (typeof text === 'string') {\n        if (text.codePointAt(0) !== this.prefixCodePoint) {\n          throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(text), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n        }\n        return this.baseDecode(text.slice(this.prefix.length));\n      } else {\n        throw Error('Can only multibase decode strings');\n      }\n    }\n  }, {\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }]);\n  return Decoder;\n}();\nvar ComposedDecoder = /*#__PURE__*/function () {\n  function ComposedDecoder(decoders) {\n    _classCallCheck(this, ComposedDecoder);\n    this.decoders = decoders;\n  }\n  _createClass(ComposedDecoder, [{\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      var prefix = input[0];\n      var decoder = this.decoders[prefix];\n      if (decoder) {\n        return decoder.decode(input);\n      } else {\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(input), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n      }\n    }\n  }]);\n  return ComposedDecoder;\n}();\nvar _or = function _or(left, right) {\n  return new ComposedDecoder(_objectSpread(_objectSpread({}, left.decoders || _defineProperty({}, left.prefix, left)), right.decoders || _defineProperty({}, right.prefix, right)));\n};\nexport { _or as or };\nexport var Codec = /*#__PURE__*/function () {\n  function Codec(name, prefix, baseEncode, baseDecode) {\n    _classCallCheck(this, Codec);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  _createClass(Codec, [{\n    key: \"encode\",\n    value: function encode(input) {\n      return this.encoder.encode(input);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      return this.decoder.decode(input);\n    }\n  }]);\n  return Codec;\n}();\nexport var from = function from(_ref3) {\n  var name = _ref3.name,\n    prefix = _ref3.prefix,\n    encode = _ref3.encode,\n    decode = _ref3.decode;\n  return new Codec(name, prefix, encode, decode);\n};\nexport var baseX = function baseX(_ref4) {\n  var prefix = _ref4.prefix,\n    name = _ref4.name,\n    alphabet = _ref4.alphabet;\n  var _basex = basex(alphabet, name),\n    encode = _basex.encode,\n    _decode = _basex.decode;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: encode,\n    decode: function decode(text) {\n      return coerce(_decode(text));\n    }\n  });\n};\nvar _decode2 = function decode(string, alphabet, bitsPerChar, name) {\n  var codes = {};\n  for (var i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  var out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  var bits = 0;\n  var buffer = 0;\n  var written = 0;\n  for (var _i = 0; _i < end; ++_i) {\n    var value = codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError(\"Non-\".concat(name, \" character\"));\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nvar _encode = function encode(data, alphabet, bitsPerChar) {\n  var pad = alphabet[alphabet.length - 1] === '=';\n  var mask = (1 << bitsPerChar) - 1;\n  var out = '';\n  var bits = 0;\n  var buffer = 0;\n  for (var i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport var rfc4648 = function rfc4648(_ref5) {\n  var name = _ref5.name,\n    prefix = _ref5.prefix,\n    bitsPerChar = _ref5.bitsPerChar,\n    alphabet = _ref5.alphabet;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: function encode(input) {\n      return _encode(input, alphabet, bitsPerChar);\n    },\n    decode: function decode(input) {\n      return _decode2(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","map":{"version":3,"names":["basex","coerce","Encoder","name","prefix","baseEncode","_classCallCheck","_createClass","key","value","encode","bytes","Uint8Array","concat","Error","Decoder","baseDecode","codePointAt","undefined","prefixCodePoint","decode","text","JSON","stringify","slice","length","or","decoder","ComposedDecoder","decoders","input","RangeError","Object","keys","left","right","_objectSpread","_defineProperty","_or","Codec","encoder","from","_ref3","baseX","_ref4","alphabet","_basex","string","bitsPerChar","codes","i","end","out","bits","buffer","written","SyntaxError","data","pad","mask","rfc4648","_ref5"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiformats/esm/src/bases/base.js"],"sourcesContent":["import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}