{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createRm = configure(function (api) {\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n  function _rm() {\n    _rm = _wrapAsyncGenerator(function (cid) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, removed;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!Array.isArray(cid)) {\n                cid = [cid];\n              }\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('block/rm', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cid.map(function (cid) {\n                    return cid.toString();\n                  }),\n                  'stream-channels': true\n                }, options)),\n                headers: options.headers\n              }));\n            case 3:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 17;\n                break;\n              }\n              removed = _step.value;\n              _context.next = 14;\n              return toCoreInterface(removed);\n            case 14:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n            case 17:\n              _context.next = 23;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 23:\n              _context.prev = 23;\n              _context.prev = 24;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 28;\n                break;\n              }\n              _context.next = 28;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 28:\n              _context.prev = 28;\n              if (!_didIteratorError) {\n                _context.next = 31;\n                break;\n              }\n              throw _iteratorError;\n            case 31:\n              return _context.finish(28);\n            case 32:\n              return _context.finish(23);\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n      })();\n    });\n    return _rm.apply(this, arguments);\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  var out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createRm","api","rm","_x","_rm","apply","arguments","_wrapAsyncGenerator","cid","options","length","undefined","_regeneratorRuntime","mark","_callee","res","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","removed","wrap","_callee$","_context","prev","next","Array","isArray","_awaitAsyncGenerator","post","signal","searchParams","_objectSpread","arg","map","toString","headers","sent","_asyncIterator","ndjson","done","value","toCoreInterface","t0","return","finish","stop","out","parse","Hash","Error","error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRm = configure(api => {\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  const out = { cid: CID.parse(removed.Hash) };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}