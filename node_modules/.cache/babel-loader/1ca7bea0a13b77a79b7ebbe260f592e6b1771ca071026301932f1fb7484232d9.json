{"ast":null,"code":"const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${name}\"`));\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}","map":{"version":3,"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","constructor","options","_basesByName","_basesByPrefix","_loadBase","loadBase","base","bases","addBase","prefix","removeBase","getBase","nameOrPrefix","listBases","Object","values"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multibases.js"],"sourcesContent":["const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,IAAI,IAAIC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,sBAAsBH,IAAM,GAAE,CAAC,CAAC;AACpF,OAAO,MAAMI,UAAU,CAAC;EACtBC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;IACxB,IAAI,CAACC,SAAS,GAAGH,OAAO,CAACI,QAAQ,IAAIX,SAAS;IAC9C,KAAK,MAAMY,IAAI,IAAIL,OAAO,CAACM,KAAK,EAAE;MAChC,IAAI,CAACC,OAAO,CAACF,IAAI,CAAC;IACpB;EACF;EACAE,OAAOA,CAACF,IAAI,EAAE;IACZ,IAAI,IAAI,CAACJ,YAAY,CAACI,IAAI,CAACX,IAAI,CAAC,IAAI,IAAI,CAACQ,cAAc,CAACG,IAAI,CAACG,MAAM,CAAC,EAAE;MACpE,MAAM,IAAIX,KAAK,CAAE,mCAAmCQ,IAAI,CAACX,IAAM,GAAE,CAAC;IACpE;IACA,IAAI,CAACO,YAAY,CAACI,IAAI,CAACX,IAAI,CAAC,GAAGW,IAAI;IACnC,IAAI,CAACH,cAAc,CAACG,IAAI,CAACG,MAAM,CAAC,GAAGH,IAAI;EACzC;EACAI,UAAUA,CAACJ,IAAI,EAAE;IACf,OAAO,IAAI,CAACJ,YAAY,CAACI,IAAI,CAACX,IAAI,CAAC;IACnC,OAAO,IAAI,CAACQ,cAAc,CAACG,IAAI,CAACG,MAAM,CAAC;EACzC;EACA,MAAME,OAAOA,CAACC,YAAY,EAAE;IAC1B,IAAI,IAAI,CAACV,YAAY,CAACU,YAAY,CAAC,EAAE;MACnC,OAAO,IAAI,CAACV,YAAY,CAACU,YAAY,CAAC;IACxC;IACA,IAAI,IAAI,CAACT,cAAc,CAACS,YAAY,CAAC,EAAE;MACrC,OAAO,IAAI,CAACT,cAAc,CAACS,YAAY,CAAC;IAC1C;IACA,MAAMN,IAAI,GAAG,MAAM,IAAI,CAACF,SAAS,CAACQ,YAAY,CAAC;IAC/C,IAAI,IAAI,CAACV,YAAY,CAACI,IAAI,CAACX,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAACQ,cAAc,CAACG,IAAI,CAACG,MAAM,CAAC,IAAI,IAAI,EAAE;MACpF,IAAI,CAACD,OAAO,CAACF,IAAI,CAAC;IACpB;IACA,OAAOA,IAAI;EACb;EACAO,SAASA,CAAA,EAAG;IACV,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACb,YAAY,CAAC;EACzC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}