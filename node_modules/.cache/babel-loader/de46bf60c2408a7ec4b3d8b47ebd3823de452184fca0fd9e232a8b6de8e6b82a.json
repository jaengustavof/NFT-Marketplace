{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  }\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}","map":{"version":3,"names":["errCode","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/pins/normalise-input.js"],"sourcesContent":["import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({ cid });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input });\n    return;\n  }\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for await (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toPin(input) {\n  const path = input.cid || `${ input.path }`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}