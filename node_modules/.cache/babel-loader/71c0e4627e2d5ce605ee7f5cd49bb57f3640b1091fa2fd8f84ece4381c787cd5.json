{"ast":null,"code":"'use strict';\n\nvar ip = require('./ip');\nvar protocols = require('./protocols-table');\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar _require2 = require('multiformats/bases/base32'),\n  base32 = _require2.base32;\nvar _require3 = require('multiformats/bases/base58'),\n  base58btc = _require3.base58btc;\nvar Digest = require('multiformats/hashes/digest');\nvar varint = require('varint');\nvar _require4 = require('uint8arrays/to-string'),\n  uint8ArrayToString = _require4.toString;\nvar _require5 = require('uint8arrays/from-string'),\n  uint8ArrayFromString = _require5.fromString;\nvar _require6 = require('uint8arrays/concat'),\n  uint8ArrayConcat = _require6.concat;\nmodule.exports = Convert;\n\n// converts (serializes) addresses\n/**\n * @param {string} proto\n * @param {string | Uint8Array} a\n */\nfunction Convert(proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBytes(proto, a);\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n *\n * @param {number|string} proto\n * @param {Uint8Array} buf\n * @returns {string}\n */\nConvert.toString = function convertToString(proto, buf) {\n  var protocol = protocols(proto);\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41:\n      // ipv6\n      return bytes2ip(buf);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return bytes2port(buf).toString();\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777:\n      // memory\n      return bytes2str(buf);\n    case 421:\n      // ipfs\n      return bytes2mh(buf);\n    case 444:\n      // onion\n      return bytes2onion(buf);\n    case 445:\n      // onion3\n      return bytes2onion(buf);\n    default:\n      return uint8ArrayToString(buf, 'base16');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBytes = function convertToBytes( /** @type {string | number } */proto, /** @type {string} */str) {\n  var protocol = protocols(proto);\n  switch (protocol.code) {\n    case 4:\n      // ipv4\n      return ip2bytes(str);\n    case 41:\n      // ipv6\n      return ip2bytes(str);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return port2bytes(parseInt(str, 10));\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777:\n      // memory\n      return str2bytes(str);\n    case 421:\n      // ipfs\n      return mh2bytes(str);\n    case 444:\n      // onion\n      return onion2bytes(str);\n    case 445:\n      // onion3\n      return onion32bytes(str);\n    default:\n      return uint8ArrayFromString(str, 'base16');\n    // no clue. convert from hex\n  }\n};\n\n/**\n * @param {string} ipString\n */\nfunction ip2bytes(ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ip.toBytes(ipString);\n}\n\n/**\n * @param {Uint8Array} ipBuff\n */\nfunction bytes2ip(ipBuff) {\n  var ipString = ip.toString(ipBuff);\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ipString;\n}\n\n/**\n * @param {number} port\n */\nfunction port2bytes(port) {\n  var buf = new ArrayBuffer(2);\n  var view = new DataView(buf);\n  view.setUint16(0, port);\n  return new Uint8Array(buf);\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2port(buf) {\n  var view = new DataView(buf.buffer);\n  return view.getUint16(buf.byteOffset);\n}\n\n/**\n * @param {string} str\n */\nfunction str2bytes(str) {\n  var buf = uint8ArrayFromString(str);\n  var size = Uint8Array.from(varint.encode(buf.length));\n  return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2str(buf) {\n  var size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return uint8ArrayToString(buf);\n}\n\n/**\n * @param {string} hash - base58btc string\n */\nfunction mh2bytes(hash) {\n  var mh;\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(\"z\".concat(hash))).bytes;\n  } else {\n    mh = CID.parse(hash).multihash.bytes;\n  }\n\n  // the address is a varint prefixed multihash string representation\n  var size = Uint8Array.from(varint.encode(mh.length));\n  return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\n\n/**\n * Converts bytes to bas58btc string\n *\n * @param {Uint8Array} buf\n * @returns {string} base58btc string\n */\nfunction bytes2mh(buf) {\n  var size = varint.decode(buf);\n  var address = buf.slice(varint.decode.bytes);\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return uint8ArrayToString(address, 'base58btc');\n}\n\n/**\n * @param {string} str\n */\nfunction onion2bytes(str) {\n  var addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  var buf = base32.decode('b' + addr[0]);\n\n  // onion port number\n  var port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n\n/**\n * @param {string} str\n */\nfunction onion32bytes(str) {\n  var addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  var buf = base32.decode('b' + addr[0]);\n\n  // onion port number\n  var port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2onion(buf) {\n  var addrBytes = buf.slice(0, buf.length - 2);\n  var portBytes = buf.slice(buf.length - 2);\n  var addr = uint8ArrayToString(addrBytes, 'base32');\n  var port = bytes2port(portBytes);\n  return addr + ':' + port;\n}","map":{"version":3,"names":["ip","require","protocols","_require","CID","_require2","base32","_require3","base58btc","Digest","varint","_require4","uint8ArrayToString","toString","_require5","uint8ArrayFromString","fromString","_require6","uint8ArrayConcat","concat","module","exports","Convert","proto","a","Uint8Array","toBytes","convertToString","buf","protocol","code","bytes2ip","bytes2port","bytes2str","bytes2mh","bytes2onion","convertToBytes","str","ip2bytes","port2bytes","parseInt","str2bytes","mh2bytes","onion2bytes","onion32bytes","ipString","isIP","Error","ipBuff","port","ArrayBuffer","view","DataView","setUint16","buffer","getUint16","byteOffset","size","from","encode","length","decode","slice","bytes","hash","mh","parse","multihash","address","addr","split","portBuf","addrBytes","portBytes"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\n\nconst ip = require('./ip')\nconst protocols = require('./protocols-table')\nconst { CID } = require('multiformats/cid')\nconst { base32 } = require('multiformats/bases/base32')\nconst { base58btc } = require('multiformats/bases/base58')\nconst Digest = require('multiformats/hashes/digest')\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\n/**\n * @param {string} proto\n * @param {string | Uint8Array} a\n */\nfunction Convert (proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n *\n * @param {number|string} proto\n * @param {Uint8Array} buf\n * @returns {string}\n */\nConvert.toString = function convertToString (proto, buf) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nConvert.toBytes = function convertToBytes (/** @type {string | number } */ proto, /** @type {string} */ str) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\n/**\n * @param {string} ipString\n */\nfunction ip2bytes (ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\n/**\n * @param {Uint8Array} ipBuff\n */\nfunction bytes2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\n/**\n * @param {number} port\n */\nfunction port2bytes (port) {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2port (buf) {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\n/**\n * @param {string} str\n */\nfunction str2bytes (str) {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\n/**\n * @param {string} hash - base58btc string\n */\nfunction mh2bytes (hash) {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\n/**\n * Converts bytes to bas58btc string\n *\n * @param {Uint8Array} buf\n * @returns {string} base58btc string\n */\nfunction bytes2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\n/**\n * @param {string} str\n */\nfunction onion2bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {string} str\n */\nfunction onion32bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return addr + ':' + port\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}