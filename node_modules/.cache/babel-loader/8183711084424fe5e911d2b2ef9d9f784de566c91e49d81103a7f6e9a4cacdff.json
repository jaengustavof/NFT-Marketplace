{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nexport const createGet = configure(api => {\n  async function get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map(link => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n  return get;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","fromString","uint8ArrayFromString","createGet","api","get","cid","options","arguments","length","undefined","res","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/object/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nexport const createGet = configure(api => {\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ cid instanceof Uint8Array ? CID.decode(cid) : cid }`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map(link => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n  return get;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,OAAO,MAAMC,SAAS,GAAGJ,SAAS,CAACK,GAAG,IAAI;EACxC,eAAeC,GAAGA,CAACC,GAAG,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAClC,MAAMG,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAG,GAAGT,GAAG,YAAYU,UAAU,GAAGlB,GAAG,CAACmB,MAAM,CAACX,GAAG,CAAC,GAAGA,GAAK,EAAC;QAC7DY,YAAY,EAAE,QAAQ;QACtB,GAAGX;MACL,CAAC,CAAC;MACFY,OAAO,EAAEZ,OAAO,CAACY;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAC7B,OAAO;MACLC,IAAI,EAAEpB,oBAAoB,CAACkB,IAAI,CAACE,IAAI,EAAE,WAAW,CAAC;MAClDC,KAAK,EAAE,CAACH,IAAI,CAACG,KAAK,IAAI,EAAE,EAAEC,GAAG,CAACC,IAAI,KAAK;QACrCC,IAAI,EAAED,IAAI,CAACC,IAAI;QACfC,IAAI,EAAE7B,GAAG,CAAC8B,KAAK,CAACH,IAAI,CAACE,IAAI,CAAC;QAC1BE,KAAK,EAAEJ,IAAI,CAACK;MACd,CAAC,CAAC;IACJ,CAAC;EACH;EACA,OAAOzB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}