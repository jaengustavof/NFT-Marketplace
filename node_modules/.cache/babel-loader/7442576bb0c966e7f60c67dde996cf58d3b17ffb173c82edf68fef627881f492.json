{"ast":null,"code":"var _require = require('multiaddr'),\n  Multiaddr = _require.Multiaddr;\nvar reduceValue = function reduceValue(_, v) {\n  return v;\n};\nvar tcpUri = function tcpUri(str, port, parts, opts) {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return \"tcp://\".concat(str, \":\").concat(port);\n  // check if tcp is the last protocol in multiaddr\n  var protocol = 'tcp';\n  var explicitPort = \":\".concat(port);\n  var last = parts[parts.length - 1];\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n  return \"\".concat(protocol, \"://\").concat(str).concat(explicitPort);\n};\nvar Reducers = {\n  ip4: reduceValue,\n  ip6: function ip6(str, content, i, parts) {\n    return parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\");\n  },\n  tcp: function tcp(str, content, i, parts, opts) {\n    return parts.some(function (p) {\n      return ['http', 'https', 'ws', 'wss'].includes(p.protocol);\n    }) ? \"\".concat(str, \":\").concat(content) : tcpUri(str, content, parts, opts);\n  },\n  udp: function udp(str, content) {\n    return \"udp://\".concat(str, \":\").concat(content);\n  },\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: function ipfs(str, content) {\n    return \"\".concat(str, \"/ipfs/\").concat(content);\n  },\n  p2p: function p2p(str, content) {\n    return \"\".concat(str, \"/p2p/\").concat(content);\n  },\n  http: function http(str) {\n    return \"http://\".concat(str);\n  },\n  https: function https(str) {\n    return \"https://\".concat(str);\n  },\n  ws: function ws(str) {\n    return \"ws://\".concat(str);\n  },\n  wss: function wss(str) {\n    return \"wss://\".concat(str);\n  },\n  'p2p-websocket-star': function p2pWebsocketStar(str) {\n    return \"\".concat(str, \"/p2p-websocket-star\");\n  },\n  'p2p-webrtc-star': function p2pWebrtcStar(str) {\n    return \"\".concat(str, \"/p2p-webrtc-star\");\n  },\n  'p2p-webrtc-direct': function p2pWebrtcDirect(str) {\n    return \"\".concat(str, \"/p2p-webrtc-direct\");\n  }\n};\nmodule.exports = function (multiaddr, opts) {\n  var ma = new Multiaddr(multiaddr);\n  var parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(function (tuple) {\n    return {\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    };\n  }).reduce(function (str, part, i, parts) {\n    var reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":{"version":3,"names":["_require","require","Multiaddr","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","concat","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","p2pWebsocketStar","p2pWebrtcStar","p2pWebrtcDirect","module","exports","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr-to-uri/index.js"],"sourcesContent":["const { Multiaddr } = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}