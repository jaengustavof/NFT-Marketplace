{"ast":null,"code":"import { normaliseInput } from './files/normalise-input-multiple.browser.js';\nimport { modeToString } from './mode-to-string.js';\nexport async function multipartRequest(source, abortController) {\n  let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`);\n    }\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtime;\n      qs.push(`mtime=${secs}`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}","map":{"version":3,"names":["normaliseInput","modeToString","multipartRequest","source","abortController","headers","arguments","length","undefined","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","push","secs","nsecs","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multipart-request.browser.js"],"sourcesContent":["import { normaliseInput } from './files/normalise-input-multiple.browser.js';\nimport { modeToString } from './mode-to-string.js';\nexport async function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {content, path, mode, mtime} of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${ index }`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${ modeToString(mode) }`);\n    }\n    if (mtime != null) {\n      const {secs, nsecs} = mtime;\n      qs.push(`mtime=${ secs }`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${ nsecs }`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${ fieldName }?${ qs.join('&') }`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,6CAA6C;AAC5E,SAASC,YAAY,QAAQ,qBAAqB;AAClD,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAEC,eAAe,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC1E,MAAMG,KAAK,GAAG,EAAE;EAChB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACb,WAAW,MAAM;IAACC,OAAO;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAK,CAAC,IAAIjB,cAAc,CAACG,MAAM,CAAC,EAAE;IACvE,IAAIe,UAAU,GAAG,EAAE;IACnB,MAAMC,IAAI,GAAGL,OAAO,GAAG,MAAM,GAAG,KAAK;IACrC,IAAIF,KAAK,GAAG,CAAC,EAAE;MACbM,UAAU,GAAI,IAAIN,KAAO,EAAC;IAC5B;IACA,IAAIQ,SAAS,GAAGD,IAAI,GAAGD,UAAU;IACjC,MAAMG,EAAE,GAAG,EAAE;IACb,IAAIL,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKR,SAAS,EAAE;MACvCa,EAAE,CAACC,IAAI,CAAE,QAAQrB,YAAY,CAACe,IAAI,CAAG,EAAC,CAAC;IACzC;IACA,IAAIC,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM;QAACM,IAAI;QAAEC;MAAK,CAAC,GAAGP,KAAK;MAC3BI,EAAE,CAACC,IAAI,CAAE,SAASC,IAAM,EAAC,CAAC;MAC1B,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjBH,EAAE,CAACC,IAAI,CAAE,eAAeE,KAAO,EAAC,CAAC;MACnC;IACF;IACA,IAAIH,EAAE,CAACd,MAAM,EAAE;MACba,SAAS,GAAI,GAAGA,SAAW,IAAIC,EAAE,CAACI,IAAI,CAAC,GAAG,CAAG,EAAC;IAChD;IACA,IAAIX,OAAO,EAAE;MACXJ,QAAQ,CAACgB,GAAG,CAACN,SAAS,EAAEN,OAAO,EAAEC,IAAI,IAAI,IAAI,GAAGY,kBAAkB,CAACZ,IAAI,CAAC,GAAGP,SAAS,CAAC;MACrF,MAAMoB,GAAG,GAAGf,KAAK,GAAGC,OAAO,CAACe,IAAI;MAChCpB,KAAK,CAACa,IAAI,CAAC;QACTQ,IAAI,EAAEf,IAAI;QACVgB,KAAK,EAAElB,KAAK;QACZe;MACF,CAAC,CAAC;MACFf,KAAK,GAAGe,GAAG;IACb,CAAC,MAAM,IAAIb,IAAI,IAAI,IAAI,EAAE;MACvBL,QAAQ,CAACgB,GAAG,CAACN,SAAS,EAAE,IAAIY,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEL,kBAAkB,CAACZ,IAAI,CAAC,EAAE;QAAEI,IAAI,EAAE;MAA0B,CAAC,CAAC,CAAC;IACxG,CAAC,MAAM;MACL,MAAM,IAAIc,KAAK,CAAC,qCAAqC,CAAC;IACxD;IACArB,KAAK,EAAE;EACT;EACA,OAAO;IACLC,KAAK;IACLJ,KAAK;IACLJ,OAAO;IACP6B,IAAI,EAAExB;EACR,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}