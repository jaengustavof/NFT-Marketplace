{"ast":null,"code":"import _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nvar PBData = Pb.Data;\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n  return parseInt(mode, 10) & 4095;\n}\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  var mtime;\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n  if (input instanceof Date) {\n    var ms = input.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nvar UnixFS = /*#__PURE__*/function () {\n  function UnixFS() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    _classCallCheck(this, UnixFS);\n    var type = options.type,\n      data = options.data,\n      blockSizes = options.blockSizes,\n      hashType = options.hashType,\n      fanout = options.fanout,\n      mtime = options.mtime,\n      mode = options.mode;\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  _createClass(UnixFS, [{\n    key: \"mode\",\n    get: function get() {\n      return this._mode;\n    },\n    set: function set(mode) {\n      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n      var parsedMode = parseMode(mode);\n      if (parsedMode !== undefined) {\n        this._mode = parsedMode;\n      }\n    }\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return Boolean(this.type && dirTypes.includes(this.type));\n    }\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    }\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        return 0;\n      }\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n      if (this.data) {\n        sum += this.data.length;\n      }\n      return sum;\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n      switch (this.type) {\n        case 'raw':\n          type = PBData.DataType.Raw;\n          break;\n        case 'directory':\n          type = PBData.DataType.Directory;\n          break;\n        case 'file':\n          type = PBData.DataType.File;\n          break;\n        case 'metadata':\n          type = PBData.DataType.Metadata;\n          break;\n        case 'symlink':\n          type = PBData.DataType.Symlink;\n          break;\n        case 'hamt-sharded-directory':\n          type = PBData.DataType.HAMTShard;\n          break;\n        default:\n          throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n      var data = this.data;\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n      var mode;\n      if (this.mode != null) {\n        mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n          mode = undefined;\n        }\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n      var mtime;\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n      var pbData = {\n        Type: type,\n        Data: data,\n        filesize: this.isDirectory() ? undefined : this.fileSize(),\n        blocksizes: this.blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      };\n      return PBData.encode(pbData).finish();\n    }\n  }], [{\n    key: \"unmarshal\",\n    value: function unmarshal(marshaled) {\n      var message = PBData.decode(marshaled);\n      var decoded = PBData.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      });\n      var data = new UnixFS({\n        type: types[decoded.Type],\n        data: decoded.Data,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.mode,\n        mtime: decoded.mtime ? {\n          secs: decoded.mtime.Seconds,\n          nsecs: decoded.mtime.FractionalNanoseconds\n        } : undefined\n      });\n      data._originalMode = decoded.mode || 0;\n      return data;\n    }\n  }]);\n  return UnixFS;\n}();\nexport { UnixFS };","map":{"version":3,"names":["errcode","Pb","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error","UnixFS","options","arguments","length","type","_classCallCheck","data","blockSizes","hashType","fanout","includes","_originalMode","_createClass","key","get","_mode","set","isDirectory","parsedMode","value","Boolean","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","sum","forEach","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","Type","filesize","blocksizes","encode","finish","unmarshal","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-unixfs/esm/src/index.js"],"sourcesContent":["import errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nconst PBData = Pb.Data;\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n];\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n  return parseInt(mode, 10) & 4095;\n}\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  let mtime;\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  constructor(options = { type: 'file' }) {\n    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  get mode() {\n    return this._mode;\n  }\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (this.data) {\n      sum += this.data.length;\n    }\n    return sum;\n  }\n  marshal() {\n    let type;\n    switch (this.type) {\n    case 'raw':\n      type = PBData.DataType.Raw;\n      break;\n    case 'directory':\n      type = PBData.DataType.Directory;\n      break;\n    case 'file':\n      type = PBData.DataType.File;\n      break;\n    case 'metadata':\n      type = PBData.DataType.Metadata;\n      break;\n    case 'symlink':\n      type = PBData.DataType.Symlink;\n      break;\n    case 'hamt-sharded-directory':\n      type = PBData.DataType.HAMTShard;\n      break;\n    default:\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let mode;\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n    let mtime;\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n}\nexport {\n  UnixFS\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}