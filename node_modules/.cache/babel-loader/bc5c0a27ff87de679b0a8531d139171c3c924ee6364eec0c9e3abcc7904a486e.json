{"ast":null,"code":"'use strict';\n\nvar isIp = require('is-ip');\nvar _require = require('uint8arrays/to-string'),\n  uint8ArrayToString = _require.toString;\nvar isIP = isIp;\nvar isV4 = isIp.v4;\nvar isV6 = isIp.v6;\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\nvar toBytes = function toBytes(ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4);\n    // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = isV4(sections[i]);\n      var v4Buffer = void 0;\n      if (isv4) {\n        v4Buffer = toBytes(sections[i]);\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n      }\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n      }\n    }\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [i, '1'];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n    result = buff || new Uint8Array(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n  return result;\n};\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\nvar toString = function toString(buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var string;\n  var view = new DataView(buff.buffer);\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var _i = 0; _i < length; _i += 2) {\n      result.push(view.getUint16(offset + _i).toString(16));\n    }\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n  return string;\n};\nmodule.exports = {\n  isIP: isIP,\n  isV4: isV4,\n  isV6: isV6,\n  toBytes: toBytes,\n  toString: toString\n};","map":{"version":3,"names":["isIp","require","_require","uint8ArrayToString","toString","isIP","isV4","v4","isV6","v6","toBytes","ip","buff","offset","result","Uint8Array","split","map","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","splice","unshift","push","argv","apply","word","Error","string","view","DataView","buffer","join","getUint16","replace","module","exports"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr/src/ip.js"],"sourcesContent":["'use strict'\n\nconst isIp = require('is-ip')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst isIP = isIp\nconst isV4 = isIp.v4\nconst isV6 = isIp.v6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toBytes = function (ip, buff, offset) {\n  offset = ~~offset\n\n  let result\n\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4)\n    // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, '1']\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = buff || new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toString = function (buff, offset, length) {\n  offset = ~~offset\n  length = length || (buff.length - offset)\n\n  const result = []\n  let string\n  const view = new DataView(buff.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBytes,\n  toString\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}