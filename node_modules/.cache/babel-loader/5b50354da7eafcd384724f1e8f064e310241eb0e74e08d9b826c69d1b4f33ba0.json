{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createStat = configure(api => {\n  async function stat(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(objectToCamelWithMetadata(data));\n  }\n  return stat;\n});\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createStat","api","stat","path","options","arguments","length","undefined","res","post","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","parse","hash"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/files/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createStat = configure(api => {\n  async function stat(path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(objectToCamelWithMetadata(data));\n  }\n  return stat;\n});\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,UAAU,GAAGF,SAAS,CAACG,GAAG,IAAI;EACzC,eAAeC,IAAIA,CAACC,IAAI,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpC,MAAMG,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAET,IAAI;QACT,GAAGC;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAC7BD,IAAI,CAACE,YAAY,GAAGF,IAAI,CAACE,YAAY,IAAI,KAAK;IAC9C,OAAOC,eAAe,CAACpB,yBAAyB,CAACiB,IAAI,CAAC,CAAC;EACzD;EACA,OAAOZ,IAAI;AACb,CAAC,CAAC;AACF,SAASe,eAAeA,CAACC,KAAK,EAAE;EAC9BA,KAAK,CAACC,GAAG,GAAGvB,GAAG,CAACwB,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;EACjC,OAAOH,KAAK,CAACG,IAAI;EACjB,OAAOH,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}