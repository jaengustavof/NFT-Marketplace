{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport var CID = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$for) {\n  function CID(version, code, multihash, bytes) {\n    _classCallCheck(this, CID);\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  _createClass(CID, [{\n    key: \"toV0\",\n    value: function toV0() {\n      switch (this.version) {\n        case 0:\n          {\n            return this;\n          }\n        default:\n          {\n            var code = this.code,\n              multihash = this.multihash;\n            if (code !== DAG_PB_CODE) {\n              throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n            }\n            if (multihash.code !== SHA_256_CODE) {\n              throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n            }\n            return CID.createV0(multihash);\n          }\n      }\n    }\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      switch (this.version) {\n        case 0:\n          {\n            var _this$multihash = this.multihash,\n              code = _this$multihash.code,\n              digest = _this$multihash.digest;\n            var multihash = Digest.create(code, digest);\n            return CID.createV1(this.code, multihash);\n          }\n        case 1:\n          {\n            return this;\n          }\n        default:\n          {\n            throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n          }\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      var bytes = this.bytes,\n        version = this.version,\n        _baseCache = this._baseCache;\n      switch (version) {\n        case 0:\n          return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n        default:\n          return toStringV1(bytes, _baseCache, base || base32.encoder);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.code,\n        version: this.version,\n        hash: this.multihash.bytes\n      };\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'CID';\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n  }, {\n    key: \"toBaseEncodedString\",\n    get: function get() {\n      throw new Error('Deprecated, use .toString()');\n    }\n  }, {\n    key: \"codec\",\n    get: function get() {\n      throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n    }\n  }, {\n    key: \"multibaseName\",\n    get: function get() {\n      throw new Error('\"multibaseName\" property is deprecated');\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      throw new Error('\"prefix\" property is deprecated');\n    }\n  }], [{\n    key: \"isCID\",\n    value: function isCID(value) {\n      deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n      return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n  }, {\n    key: \"asCID\",\n    value: function asCID(value) {\n      if (value instanceof CID) {\n        return value;\n      } else if (value != null && value.asCID === value) {\n        var _version = value.version,\n          code = value.code,\n          multihash = value.multihash,\n          bytes = value.bytes;\n        return new CID(_version, code, multihash, bytes || encodeCID(_version, code, multihash.bytes));\n      } else if (value != null && value[cidSymbol] === true) {\n        var _version2 = value.version,\n          _multihash = value.multihash,\n          _code = value.code;\n        var digest = Digest.decode(_multihash);\n        return CID.create(_version2, _code, digest);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(version, code, digest) {\n      if (typeof code !== 'number') {\n        throw new Error('String codecs are no longer supported');\n      }\n      switch (version) {\n        case 0:\n          {\n            if (code !== DAG_PB_CODE) {\n              throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n            } else {\n              return new CID(version, code, digest, digest.bytes);\n            }\n          }\n        case 1:\n          {\n            var bytes = encodeCID(version, code, digest.bytes);\n            return new CID(version, code, digest, bytes);\n          }\n        default:\n          {\n            throw new Error('Invalid version');\n          }\n      }\n    }\n  }, {\n    key: \"createV0\",\n    value: function createV0(digest) {\n      return CID.create(0, DAG_PB_CODE, digest);\n    }\n  }, {\n    key: \"createV1\",\n    value: function createV1(code, digest) {\n      return CID.create(1, code, digest);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes) {\n      var _CID$decodeFirst = CID.decodeFirst(bytes),\n        _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n        cid = _CID$decodeFirst2[0],\n        remainder = _CID$decodeFirst2[1];\n      if (remainder.length) {\n        throw new Error('Incorrect length');\n      }\n      return cid;\n    }\n  }, {\n    key: \"decodeFirst\",\n    value: function decodeFirst(bytes) {\n      var specs = CID.inspectBytes(bytes);\n      var prefixSize = specs.size - specs.multihashSize;\n      var multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n      if (multihashBytes.byteLength !== specs.multihashSize) {\n        throw new Error('Incorrect length');\n      }\n      var digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n      var digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n      var cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n      return [cid, bytes.subarray(specs.size)];\n    }\n  }, {\n    key: \"inspectBytes\",\n    value: function inspectBytes(initialBytes) {\n      var offset = 0;\n      var next = function next() {\n        var _varint$decode = varint.decode(initialBytes.subarray(offset)),\n          _varint$decode2 = _slicedToArray(_varint$decode, 2),\n          i = _varint$decode2[0],\n          length = _varint$decode2[1];\n        offset += length;\n        return i;\n      };\n      var version = next();\n      var codec = DAG_PB_CODE;\n      if (version === 18) {\n        version = 0;\n        offset = 0;\n      } else if (version === 1) {\n        codec = next();\n      }\n      if (version !== 0 && version !== 1) {\n        throw new RangeError(\"Invalid CID version \".concat(version));\n      }\n      var prefixSize = offset;\n      var multihashCode = next();\n      var digestSize = next();\n      var size = offset + digestSize;\n      var multihashSize = size - prefixSize;\n      return {\n        version: version,\n        codec: codec,\n        multihashCode: multihashCode,\n        digestSize: digestSize,\n        multihashSize: multihashSize,\n        size: size\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(source, base) {\n      var _parseCIDtoBytes = parseCIDtoBytes(source, base),\n        _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n        prefix = _parseCIDtoBytes2[0],\n        bytes = _parseCIDtoBytes2[1];\n      var cid = CID.decode(bytes);\n      cid._baseCache.set(prefix, source);\n      return cid;\n    }\n  }]);\n  return CID;\n}(Symbol.toStringTag, Symbol.for('nodejs.util.inspect.custom'));\nvar parseCIDtoBytes = function parseCIDtoBytes(source, base) {\n  switch (source[0]) {\n    case 'Q':\n      {\n        var decoder = base || base58btc;\n        return [base58btc.prefix, decoder.decode(\"\".concat(base58btc.prefix).concat(source))];\n      }\n    case base58btc.prefix:\n      {\n        var _decoder = base || base58btc;\n        return [base58btc.prefix, _decoder.decode(source)];\n      }\n    case base32.prefix:\n      {\n        var _decoder2 = base || base32;\n        return [base32.prefix, _decoder2.decode(source)];\n      }\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n        return [source[0], base.decode(source)];\n      }\n  }\n};\nvar toStringV0 = function toStringV0(bytes, cache, base) {\n  var prefix = base.prefix;\n  if (prefix !== base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n  var cid = cache.get(prefix);\n  if (cid == null) {\n    var _cid = base.encode(bytes).slice(1);\n    cache.set(prefix, _cid);\n    return _cid;\n  } else {\n    return cid;\n  }\n};\nvar toStringV1 = function toStringV1(bytes, cache, base) {\n  var prefix = base.prefix;\n  var cid = cache.get(prefix);\n  if (cid == null) {\n    var _cid2 = base.encode(bytes);\n    cache.set(prefix, _cid2);\n    return _cid2;\n  } else {\n    return cid;\n  }\n};\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\nvar encodeCID = function encodeCID(version, code, multihash) {\n  var codeOffset = varint.encodingLength(version);\n  var hashOffset = codeOffset + varint.encodingLength(code);\n  var bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nvar cidSymbol = Symbol.for('@ipld/js-cid/CID');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = '0.0.0-dev';\nvar deprecate = function deprecate(range, message) {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nvar IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";","map":{"version":3,"names":["varint","Digest","base58btc","base32","coerce","CID","_Symbol$toStringTag","_Symbol$for","version","code","multihash","bytes","_classCallCheck","byteOffset","byteLength","asCID","_baseCache","Map","Object","defineProperties","hidden","readonly","_createClass","key","value","toV0","DAG_PB_CODE","Error","SHA_256_CODE","createV0","toV1","_this$multihash","digest","create","createV1","concat","equals","other","toString","base","toStringV0","encoder","toStringV1","toJSON","hash","get","isCID","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","decode","_CID$decodeFirst","decodeFirst","_CID$decodeFirst2","_slicedToArray","cid","remainder","length","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","subarray","digestBytes","digestSize","multihashCode","codec","initialBytes","offset","next","_varint$decode","_varint$decode2","i","RangeError","parse","source","_parseCIDtoBytes","parseCIDtoBytes","_parseCIDtoBytes2","prefix","set","Symbol","toStringTag","for","decoder","cache","name","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiformats/esm/src/cid.js"],"sourcesContent":["import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}