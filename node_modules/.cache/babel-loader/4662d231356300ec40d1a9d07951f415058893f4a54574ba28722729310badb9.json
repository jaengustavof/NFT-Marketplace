{"ast":null,"code":"const LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\nexport class Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","constructor","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","name","code","removeCodec","getCodec","table","listCodecs","Object","values"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multicodecs.js"],"sourcesContent":["const LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nexport class Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,UAAU,IAAIC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,uBAAuBH,UAAY,GAAE,CAAC,CAAC;AAClG,OAAO,MAAMI,WAAW,CAAC;EACvBC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACI,SAAS,IAAIX,UAAU;IACjD,KAAK,MAAMY,KAAK,IAAIL,OAAO,CAACM,MAAM,EAAE;MAClC,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC;IACtB;EACF;EACAE,QAAQA,CAACF,KAAK,EAAE;IACd,IAAI,IAAI,CAACJ,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,IAAI,IAAI,CAACN,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC,EAAE;MACpE,MAAM,IAAIZ,KAAK,CAAE,sCAAsCQ,KAAK,CAACG,IAAM,GAAE,CAAC;IACxE;IACA,IAAI,CAACP,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,GAAGH,KAAK;IACtC,IAAI,CAACH,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC,GAAGJ,KAAK;EACxC;EACAK,WAAWA,CAACL,KAAK,EAAE;IACjB,OAAO,IAAI,CAACJ,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC;IACrC,OAAO,IAAI,CAACN,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC;EACvC;EACA,MAAME,QAAQA,CAACF,IAAI,EAAE;IACnB,MAAMG,KAAK,GAAG,OAAOH,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACR,aAAa,GAAG,IAAI,CAACC,aAAa;IAChF,IAAIU,KAAK,CAACH,IAAI,CAAC,EAAE;MACf,OAAOG,KAAK,CAACH,IAAI,CAAC;IACpB;IACA,MAAMJ,KAAK,GAAG,MAAM,IAAI,CAACF,UAAU,CAACM,IAAI,CAAC;IACzC,IAAIG,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB,IAAI,CAACF,QAAQ,CAACF,KAAK,CAAC;IACtB;IACA,OAAOA,KAAK;EACd;EACAQ,UAAUA,CAAA,EAAG;IACX,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACd,aAAa,CAAC;EAC1C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}