{"ast":null,"code":"import { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createWrite = configure(api => {\n  async function write(path, input) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest([{\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: parseMtime(options.mtime)\n      }], controller, options.headers))\n    });\n    await res.text();\n  }\n  return write;\n});","map":{"version":3,"names":["modeToString","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","createWrite","api","write","path","input","options","arguments","length","undefined","controller","AbortController","signal","res","post","searchParams","arg","streamChannels","count","content","mode","mtime","headers","text"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/files/write.js"],"sourcesContent":["import { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createWrite = configure(api => {\n  async function write(path, input, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n    });\n    await res.text();\n  }\n  return write;\n});"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAO,MAAMC,WAAW,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAC1C,eAAeC,KAAKA,CAACC,IAAI,EAAEC,KAAK,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC5C,MAAMG,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGZ,WAAW,CAACU,UAAU,CAACE,MAAM,EAAEN,OAAO,CAACM,MAAM,CAAC;IAC7D,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,aAAa,EAAE;MACxCF,MAAM;MACNG,YAAY,EAAEhB,iBAAiB,CAAC;QAC9BiB,GAAG,EAAEZ,IAAI;QACTa,cAAc,EAAE,IAAI;QACpBC,KAAK,EAAEZ,OAAO,CAACE,MAAM;QACrB,GAAGF;MACL,CAAC,CAAC;MACF,IAAG,MAAMR,gBAAgB,CAAC,CAAC;QACvBqB,OAAO,EAAEd,KAAK;QACdD,IAAI,EAAE,KAAK;QACXgB,IAAI,EAAEzB,YAAY,CAACW,OAAO,CAACc,IAAI,CAAC;QAChCC,KAAK,EAAEzB,UAAU,CAACU,OAAO,CAACe,KAAK;MACjC,CAAC,CAAC,EAAEX,UAAU,EAAEJ,OAAO,CAACgB,OAAO,CAAC;IACpC,CAAC,CAAC;IACF,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;EAClB;EACA,OAAOpB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}