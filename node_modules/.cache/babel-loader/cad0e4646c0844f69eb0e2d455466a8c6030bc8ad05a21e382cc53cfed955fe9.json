{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddAll = configure(api => {\n  function addAll(source) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        for await (const {\n          path,\n          recursive,\n          metadata\n        } of normaliseInput(source)) {\n          const res = await api.post('pin/add', {\n            signal: options.signal,\n            searchParams: toUrlSearchParams({\n              ...options,\n              arg: path,\n              recursive,\n              metadata: metadata ? JSON.stringify(metadata) : undefined,\n              stream: true\n            }),\n            headers: options.headers\n          });\n          for await (const pin of res.ndjson()) {\n            if (pin.Pins) {\n              for (const cid of pin.Pins) {\n                yield CID.parse(cid);\n              }\n              continue;\n            }\n            yield CID.parse(pin);\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return addAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createAddAll","api","addAll","source","options","arguments","length","undefined","path","recursive","metadata","res","post","signal","searchParams","arg","JSON","stringify","stream","headers","pin","ndjson","Pins","cid","parse","e","Promise","reject"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/pin/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddAll = configure(api => {\n  async function* addAll(source, options = {}) {\n    for await (const {path, recursive, metadata} of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return addAll;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,YAAY,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC3C,SAAgBC,MAAMA,CAACC,MAAM;IAAA;MAAA,IAAEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAAA,0BAAE;QAC3C,WAAW,MAAM;UAACG,IAAI;UAAEC,SAAS;UAAEC;QAAQ,CAAC,IAAIZ,cAAc,CAACK,MAAM,CAAC,EAAE;UACtE,MAAMQ,GAAG,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,SAAS,EAAE;YACpCC,MAAM,EAAET,OAAO,CAACS,MAAM;YACtBC,YAAY,EAAEf,iBAAiB,CAAC;cAC9B,GAAGK,OAAO;cACVW,GAAG,EAAEP,IAAI;cACTC,SAAS;cACTC,QAAQ,EAAEA,QAAQ,GAAGM,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,GAAGH,SAAS;cACzDW,MAAM,EAAE;YACV,CAAC,CAAC;YACFC,OAAO,EAAEf,OAAO,CAACe;UACnB,CAAC,CAAC;UACF,WAAW,MAAMC,GAAG,IAAIT,GAAG,CAACU,MAAM,CAAC,CAAC,EAAE;YACpC,IAAID,GAAG,CAACE,IAAI,EAAE;cACZ,KAAK,MAAMC,GAAG,IAAIH,GAAG,CAACE,IAAI,EAAE;gBAC1B,MAAM1B,GAAG,CAAC4B,KAAK,CAACD,GAAG,CAAC;cACtB;cACA;YACF;YACA,MAAM3B,GAAG,CAAC4B,KAAK,CAACJ,GAAG,CAAC;UACtB;QACF;MACF,CAAC;IAAA,SAAAK,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EACD,OAAOvB,MAAM;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}