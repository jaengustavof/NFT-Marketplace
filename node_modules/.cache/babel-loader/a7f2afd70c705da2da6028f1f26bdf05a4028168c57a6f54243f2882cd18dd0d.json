{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = configure(api => {\n  async function put(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest([data], controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      if (options.format === 'dag-pb') {\n        return put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    }\n    return CID.parse(res.Key);\n  }\n  return put;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createPut","api","put","data","options","arguments","length","undefined","controller","AbortController","signal","res","response","post","searchParams","headers","json","err","format","parse","Key"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/block/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = configure(api => {\n  async function put(data, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...await multipartRequest([data], controller, options.headers)\n      });\n      res = await response.json();\n    } catch (err) {\n      if (options.format === 'dag-pb') {\n        return put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    }\n    return CID.parse(res.Key);\n  }\n  return put;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAO,MAAMC,SAAS,GAAGH,SAAS,CAACI,GAAG,IAAI;EACxC,eAAeC,GAAGA,CAACC,IAAI,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACnC,MAAMG,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGX,WAAW,CAACS,UAAU,CAACE,MAAM,EAAEN,OAAO,CAACM,MAAM,CAAC;IAC7D,IAAIC,GAAG;IACP,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,WAAW,EAAE;QAC3CH,MAAM,EAAEA,MAAM;QACdI,YAAY,EAAEhB,iBAAiB,CAACM,OAAO,CAAC;QACxC,IAAG,MAAMR,gBAAgB,CAAC,CAACO,IAAI,CAAC,EAAEK,UAAU,EAAEJ,OAAO,CAACW,OAAO,CAAC;MAChE,CAAC,CAAC;MACFJ,GAAG,GAAG,MAAMC,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAIb,OAAO,CAACc,MAAM,KAAK,QAAQ,EAAE;QAC/B,OAAOhB,GAAG,CAACC,IAAI,EAAE;UACf,GAAGC,OAAO;UACVc,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC,MAAM,IAAId,OAAO,CAACc,MAAM,KAAK,UAAU,EAAE;QACxC,OAAOhB,GAAG,CAACC,IAAI,EAAE;UACf,GAAGC,OAAO;UACVc,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;MACA,MAAMD,GAAG;IACX;IACA,OAAOtB,GAAG,CAACwB,KAAK,CAACR,GAAG,CAACS,GAAG,CAAC;EAC3B;EACA,OAAOlB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}