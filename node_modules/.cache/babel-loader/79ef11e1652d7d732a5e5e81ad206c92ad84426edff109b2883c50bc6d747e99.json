{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRm = configure(api => {\n  function rm(cid) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        if (!Array.isArray(cid)) {\n          cid = [cid];\n        }\n        const res = await api.post('block/rm', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: cid.map(cid => cid.toString()),\n            'stream-channels': true,\n            ...options\n          }),\n          headers: options.headers\n        });\n        for await (const removed of res.ndjson()) {\n          yield toCoreInterface(removed);\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createRm","api","rm","cid","options","arguments","length","undefined","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","e","Promise","reject","out","parse","Hash","Error","error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRm = configure(api => {\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\nfunction toCoreInterface(removed) {\n  const out = { cid: CID.parse(removed.Hash) };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC,SAAgBC,EAAEA,CAACC,GAAG;IAAA;MAAA,IAAEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAAA,0BAAE;QACpC,IAAI,CAACG,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,EAAE;UACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;QACb;QACA,MAAMO,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,UAAU,EAAE;UACrCC,MAAM,EAAER,OAAO,CAACQ,MAAM;UACtBC,YAAY,EAAEd,iBAAiB,CAAC;YAC9Be,GAAG,EAAEX,GAAG,CAACY,GAAG,CAACZ,GAAG,IAAIA,GAAG,CAACa,QAAQ,CAAC,CAAC,CAAC;YACnC,iBAAiB,EAAE,IAAI;YACvB,GAAGZ;UACL,CAAC,CAAC;UACFa,OAAO,EAAEb,OAAO,CAACa;QACnB,CAAC,CAAC;QACF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;UACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;QAChC;MACF,CAAC;IAAA,SAAAG,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EACD,OAAOnB,EAAE;AACX,CAAC,CAAC;AACF,SAASkB,eAAeA,CAACF,OAAO,EAAE;EAChC,MAAMM,GAAG,GAAG;IAAErB,GAAG,EAAEN,GAAG,CAAC4B,KAAK,CAACP,OAAO,CAACQ,IAAI;EAAE,CAAC;EAC5C,IAAIR,OAAO,CAACS,KAAK,EAAE;IACjBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACT,OAAO,CAACS,KAAK,CAAC;EACtC;EACA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}