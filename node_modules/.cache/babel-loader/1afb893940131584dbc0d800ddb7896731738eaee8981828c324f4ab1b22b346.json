{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","arguments","length","undefined","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/config/set.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;EACxC,MAAMC,GAAG,GAAG,eAAAA,CAAOC,GAAG,EAAEC,KAAK,EAAmB;IAAA,IAAjBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACzC,IAAI,OAAOH,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIM,KAAK,CAAC,kBAAkB,CAAC;IACrC;IACA,MAAMC,MAAM,GAAG;MACb,GAAGL,OAAO;MACV,GAAGM,WAAW,CAACR,GAAG,EAAEC,KAAK;IAC3B,CAAC;IACD,MAAMQ,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,QAAQ,EAAE;MACnCC,MAAM,EAAET,OAAO,CAACS,MAAM;MACtBC,YAAY,EAAEhB,iBAAiB,CAACW,MAAM,CAAC;MACvCM,OAAO,EAAEX,OAAO,CAACW;IACnB,CAAC,CAAC;IACF,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;EAClB,CAAC;EACD,OAAOf,GAAG;AACZ,CAAC,CAAC;AACF,MAAMS,WAAW,GAAGA,CAACR,GAAG,EAAEC,KAAK,KAAK;EAClC,QAAQ,OAAOA,KAAK;IACpB,KAAK,SAAS;MACZ,OAAO;QACLc,GAAG,EAAE,CACHf,GAAG,EACHC,KAAK,CAACe,QAAQ,CAAC,CAAC,CACjB;QACDC,IAAI,EAAE;MACR,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLF,GAAG,EAAE,CACHf,GAAG,EACHC,KAAK;MAET,CAAC;IACH;MACE,OAAO;QACLc,GAAG,EAAE,CACHf,GAAG,EACHkB,IAAI,CAACC,SAAS,CAAClB,KAAK,CAAC,CACtB;QACDmB,IAAI,EAAE;MACR,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}