{"ast":null,"code":"import { CID } from 'multiformats';\nimport { base64 } from 'multiformats/bases/base64';\nimport { Token, Type } from 'cborg';\nimport * as cborgJson from 'cborg/json';\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [new Token(Type.map, Infinity, 1), new Token(Type.string, '/', 1), new Token(Type.string, cidString, cidString.length), new Token(Type.break, undefined, 1)];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.encode(bytes).slice(1);\n  return [new Token(Type.map, Infinity, 1), new Token(Type.string, '/', 1), new Token(Type.map, Infinity, 1), new Token(Type.string, 'bytes', 5), new Token(Type.string, bytesString, bytesString.length), new Token(Type.break, undefined, 1), new Token(Type.break, undefined, 1)];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new Token(Type.tag, 42, 0);\n        }\n        if (valueToken.type === Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.decode(`m${innerValueToken.value}`);\n              return new Token(Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = CID.parse;\nexport const name = 'dag-json';\nexport const code = 297;\nexport const encode = node => cborgJson.encode(node, encodeOptions);\nexport const decode = data => {\n  const options = Object.assign(decodeOptions, {\n    tokenizer: new DagJsonTokenizer(data, decodeOptions)\n  });\n  return cborgJson.decode(data, options);\n};","map":{"version":3,"names":["CID","base64","Token","Type","cborgJson","cidEncoder","obj","asCID","cid","cidString","toString","map","Infinity","string","length","break","undefined","bytesEncoder","bytes","bytesString","encode","slice","undefinedEncoder","Error","numberEncoder","num","Number","isNaN","encodeOptions","typeEncoders","Object","Uint8Array","Buffer","number","DagJsonTokenizer","Tokenizer","constructor","data","options","tokenBuffer","done","_next","pop","next","token","type","keyToken","value","valueToken","breakToken","push","tag","innerKeyToken","innerValueToken","i","decode","decodeOptions","allowIndefinite","allowUndefined","allowNaN","allowInfinity","allowBigInt","strict","useMaps","tags","parse","name","code","node","assign","tokenizer"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/@ipld/dag-json/esm/index.js"],"sourcesContent":["import { CID } from 'multiformats';\nimport { base64 } from 'multiformats/bases/base64';\nimport {\n  Token,\n  Type\n} from 'cborg';\nimport * as cborgJson from 'cborg/json';\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1),\n    new Token(Type.string, cidString, cidString.length),\n    new Token(Type.break, undefined, 1)\n  ];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.encode(bytes).slice(1);\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1),\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, 'bytes', 5),\n    new Token(Type.string, bytesString, bytesString.length),\n    new Token(Type.break, undefined, 1),\n    new Token(Type.break, undefined, 1)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new Token(Type.tag, 42, 0);\n        }\n        if (valueToken.type === Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.decode(`m${ innerValueToken.value }`);\n              return new Token(Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = CID.parse;\nexport const name = 'dag-json';\nexport const code = 297;\nexport const encode = node => cborgJson.encode(node, encodeOptions);\nexport const decode = data => {\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) });\n  return cborgJson.decode(data, options);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}