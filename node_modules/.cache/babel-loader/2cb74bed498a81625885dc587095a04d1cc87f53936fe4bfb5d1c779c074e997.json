{"ast":null,"code":"var _jsxFileName = \"/home/gustavo/blockchain/Marketplace/src/frontend/components/Create.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = '2SFSUpmPI68xGF8hJbufrqlW1vy';\nconst projectSecret = 'a55e8b33848f8f0f0fe6046d9043eb1e';\nconst credentials = projectId + ':' + projectSecret;\nconst encodedCredentials = btoa(credentials);\nconst authHeader = 'Basic ' + encodedCredentials;\nconst client = ipfsHttpClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: authHeader\n  }\n}); //nodo infura para conectar cliente IPFS\n\nconst Create = _ref => {\n  _s();\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  // project ID - 3ecd8f60e2a64f2188c95c9e4b485b05\n  // Secret - cac499f33e78471f811a87be965f00e8\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n        console.log(image);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList();\n    } catch (error) {\n      console.log(\"ipfs URI upload error: \", error);\n    }\n  };\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n    await (await nft.mint(uri)).wait();\n    const id = await nft.tokenCount();\n    await await nft.setApprovalForAll(marketplace.address, true);\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: \"1000px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"numbre\",\n              placeholder: \"Price (ETH)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"g-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create and list NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","jsxDEV","_jsxDEV","projectId","projectSecret","credentials","encodedCredentials","btoa","authHeader","client","host","port","protocol","headers","authorization","Create","_ref","_s","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","className","children","role","style","maxWidth","Control","type","required","onChange","fileName","_jsxFileName","lineNumber","columnNumber","e","value","size","placeholder","as","onClick","variant","_c","$RefreshReg$"],"sources":["/home/gustavo/blockchain/Marketplace/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\n\nconst projectId = '2SFSUpmPI68xGF8hJbufrqlW1vy';\nconst projectSecret = 'a55e8b33848f8f0f0fe6046d9043eb1e';\nconst credentials = projectId + ':' + projectSecret;\nconst encodedCredentials = btoa(credentials);\nconst authHeader = 'Basic ' + encodedCredentials;\nconst client = ipfsHttpClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https', headers: {\n    authorization: authHeader}}); //nodo infura para conectar cliente IPFS\n\nconst Create = ({ marketplace, nft }) => {\n\n    const [image, setImage] = useState('');\n    const [price, setPrice] = useState(null);\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    // project ID - 3ecd8f60e2a64f2188c95c9e4b485b05\n    // Secret - cac499f33e78471f811a87be965f00e8\n    const uploadToIPFS = async (event) =>{\n        event.preventDefault();\n        const file = event.target.files[0];\n        if(typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file);\n                console.log(result);\n                setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n                console.log(image)\n            } catch (error) {\n                console.log(\"ipfs image upload error: \", error);\n                \n            }\n        }\n    }\n\n    const createNFT = async () => {\n        if(!image || !price || !name || !description) return;\n\n        try {\n\n            const result = await client.add(JSON.stringify({ image, price, name, description }));\n            mintThenList();\n\n        } catch (error) {\n            \n            console.log(\"ipfs URI upload error: \", error);\n\n        }\n    }\n\n    const mintThenList = async (result) =>{\n\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n        await (await nft.mint(uri)).wait();\n\n        const id = await nft.tokenCount();\n        await (await nft.setApprovalForAll(marketplace.address, true));\n\n        const listingPrice = ethers.utils.parseEther(price.toString());\n        await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n    }\n\n    return (\n        <div className=\"container-fluid mt-5\">\n            <div className=\"row\">\n                <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: \"1000px\"}}>\n                    <div className=\"content mx-auto\">\n                        <Row className=\"g-4\">\n                            <Form.Control type=\"file\" required name=\"file\" onChange={uploadToIPFS} />\n                            <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n                            <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"numbre\" placeholder=\"Price (ETH)\" />\n                            <div className=\"g-grid px-0\">\n                                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                                    Create and list NFT\n                                </Button>\n                            </div>\n                        </Row>\n                    </div>\n                </main>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Create;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}