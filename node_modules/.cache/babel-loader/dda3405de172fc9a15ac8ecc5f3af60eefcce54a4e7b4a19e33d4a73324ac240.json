{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  var v = 0;\n  for (var shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    var b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * Math.pow(2, shift);\n    if (b < 128) {\n      break;\n    }\n  }\n  return [v, offset];\n}\nfunction decodeBytes(bytes, offset) {\n  var byteLen;\n  var _decodeVarint = decodeVarint(bytes, offset);\n  var _decodeVarint2 = _slicedToArray(_decodeVarint, 2);\n  byteLen = _decodeVarint2[0];\n  offset = _decodeVarint2[1];\n  var postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\nfunction decodeKey(bytes, index) {\n  var wire;\n  var _decodeVarint3 = decodeVarint(bytes, index);\n  var _decodeVarint4 = _slicedToArray(_decodeVarint3, 2);\n  wire = _decodeVarint4[0];\n  index = _decodeVarint4[1];\n  return [wire & 7, wire >> 3, index];\n}\nfunction decodeLink(bytes) {\n  var link = {};\n  var l = bytes.length;\n  var index = 0;\n  while (index < l) {\n    var wireType = void 0,\n      fieldNum = void 0;\n    var _decodeKey = decodeKey(bytes, index);\n    var _decodeKey2 = _slicedToArray(_decodeKey, 3);\n    wireType = _decodeKey2[0];\n    fieldNum = _decodeKey2[1];\n    index = _decodeKey2[2];\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Hash\"));\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      var _decodeBytes = decodeBytes(bytes, index);\n      var _decodeBytes2 = _slicedToArray(_decodeBytes, 2);\n      link.Hash = _decodeBytes2[0];\n      index = _decodeBytes2[1];\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Name\"));\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      var byts = void 0;\n      var _decodeBytes3 = decodeBytes(bytes, index);\n      var _decodeBytes4 = _slicedToArray(_decodeBytes3, 2);\n      byts = _decodeBytes4[0];\n      index = _decodeBytes4[1];\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Tsize\"));\n      }\n      ;\n      var _decodeVarint5 = decodeVarint(bytes, index);\n      var _decodeVarint6 = _slicedToArray(_decodeVarint5, 2);\n      link.Tsize = _decodeVarint6[0];\n      index = _decodeVarint6[1];\n    } else {\n      throw new Error(\"protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got \".concat(fieldNum));\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nexport function decodeNode(bytes) {\n  var l = bytes.length;\n  var index = 0;\n  var links;\n  var linksBeforeData = false;\n  var data;\n  while (index < l) {\n    var wireType = void 0,\n      fieldNum = void 0;\n    var _decodeKey3 = decodeKey(bytes, index);\n    var _decodeKey4 = _slicedToArray(_decodeKey3, 3);\n    wireType = _decodeKey4[0];\n    fieldNum = _decodeKey4[1];\n    index = _decodeKey4[2];\n    if (wireType !== 2) {\n      throw new Error(\"protobuf: (PBNode) invalid wireType, expected 2, got \".concat(wireType));\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      var _decodeBytes5 = decodeBytes(bytes, index);\n      var _decodeBytes6 = _slicedToArray(_decodeBytes5, 2);\n      data = _decodeBytes6[0];\n      index = _decodeBytes6[1];\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      var byts = void 0;\n      var _decodeBytes7 = decodeBytes(bytes, index);\n      var _decodeBytes8 = _slicedToArray(_decodeBytes7, 2);\n      byts = _decodeBytes8[0];\n      index = _decodeBytes8[1];\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(\"protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got \".concat(fieldNum));\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  var node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}","map":{"version":3,"names":["textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","Math","pow","decodeBytes","byteLen","_decodeVarint","_decodeVarint2","_slicedToArray","postOffset","subarray","decodeKey","index","wire","_decodeVarint3","_decodeVarint4","decodeLink","link","l","wireType","fieldNum","_decodeKey","_decodeKey2","Hash","concat","Name","undefined","Tsize","_decodeBytes","_decodeBytes2","byts","_decodeBytes3","_decodeBytes4","decode","_decodeVarint5","_decodeVarint6","decodeNode","links","linksBeforeData","data","_decodeKey3","_decodeKey4","_decodeBytes5","_decodeBytes6","_decodeBytes7","_decodeBytes8","push","node","Data","Links"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/@ipld/dag-pb/esm/src/pb-decode.js"],"sourcesContent":["const textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n    if (b < 128) {\n      break;\n    }\n  }\n  return [\n    v,\n    offset\n  ];\n}\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [\n    bytes.subarray(offset, postOffset),\n    postOffset\n  ];\n}\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [\n    wire & 7,\n    wire >> 3,\n    index\n  ];\n}\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);\n      }\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      [data, index] = decodeBytes(bytes, index);\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  const node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}