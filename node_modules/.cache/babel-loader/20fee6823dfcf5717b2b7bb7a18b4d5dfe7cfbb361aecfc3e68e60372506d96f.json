{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\nexport var createAppendData = configure(function (api) {\n  function appendData(_x, _x2) {\n    return _appendData.apply(this, arguments);\n  }\n  function _appendData() {\n    _appendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, data) {\n      var options,\n        controller,\n        signal,\n        res,\n        _yield$res$json,\n        Hash,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal);\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              signal: signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: \"\".concat(cid)\n              }, options))\n            };\n            _context.next = 8;\n            return multipartRequest([data], controller, options.headers);\n          case 8:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 12;\n            return _context.t0.post.call(_context.t0, 'object/patch/append-data', _context.t4);\n          case 12:\n            res = _context.sent;\n            _context.next = 15;\n            return res.json();\n          case 15:\n            _yield$res$json = _context.sent;\n            Hash = _yield$res$json.Hash;\n            return _context.abrupt(\"return\", CID.parse(Hash));\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _appendData.apply(this, arguments);\n  }\n  return appendData;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createAppendData","api","appendData","_x","_x2","_appendData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cid","data","options","controller","signal","res","_yield$res$json","Hash","_args","wrap","_callee$","_context","prev","next","length","undefined","AbortController","t0","t1","_objectSpread","t2","searchParams","arg","concat","headers","t3","sent","t4","post","call","json","abrupt","parse","stop"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/object/patch/append-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\nexport const createAppendData = configure(api => {\n  async function appendData(cid, data, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ cid }`,\n        ...options\n      }),\n      ...await multipartRequest([data], controller, options.headers)\n    });\n    const {Hash} = await res.json();\n    return CID.parse(Hash);\n  }\n  return appendData;\n});"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAO,IAAMC,gBAAgB,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAAA,SAChCC,UAAUA,CAAAC,EAAA,EAAAC,GAAA;IAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,YAAA;IAAAA,WAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAzB,SAAAC,QAA0BC,GAAG,EAAEC,IAAI;MAAA,IAAAC,OAAA;QAAAC,UAAA;QAAAC,MAAA;QAAAC,GAAA;QAAAC,eAAA;QAAAC,IAAA;QAAAC,KAAA,GAAAb,SAAA;MAAA,OAAAE,mBAAA,GAAAY,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAEX,OAAO,GAAAM,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YACzCL,UAAU,GAAG,IAAIa,eAAe,CAAC,CAAC;YAClCZ,MAAM,GAAGjB,WAAW,CAACgB,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;YAAAO,QAAA,CAAAM,EAAA,GAC3C5B,GAAG;YAAAsB,QAAA,CAAAO,EAAA,GAAAC,aAAA;YAAAR,QAAA,CAAAS,EAAA;cACnBhB,MAAM,EAANA,MAAM;cACNiB,YAAY,EAAEnC,iBAAiB,CAAAiC,aAAA;gBAC7BG,GAAG,KAAAC,MAAA,CAAMvB,GAAG;cAAG,GACZE,OAAO,CACX;YAAC;YAAAS,QAAA,CAAAE,IAAA;YAAA,OACO7B,gBAAgB,CAAC,CAACiB,IAAI,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACsB,OAAO,CAAC;UAAA;YAAAb,QAAA,CAAAc,EAAA,GAAAd,QAAA,CAAAe,IAAA;YAAAf,QAAA,CAAAgB,EAAA,OAAAhB,QAAA,CAAAO,EAAA,EAAAP,QAAA,CAAAS,EAAA,EAAAT,QAAA,CAAAc,EAAA;YAAAd,QAAA,CAAAE,IAAA;YAAA,OAAAF,QAAA,CAAAM,EAAA,CAN1CW,IAAI,CAAAC,IAAA,CAAAlB,QAAA,CAAAM,EAAA,EAAC,0BAA0B,EAAAN,QAAA,CAAAgB,EAAA;UAAA;YAA/CtB,GAAG,GAAAM,QAAA,CAAAe,IAAA;YAAAf,QAAA,CAAAE,IAAA;YAAA,OAQYR,GAAG,CAACyB,IAAI,CAAC,CAAC;UAAA;YAAAxB,eAAA,GAAAK,QAAA,CAAAe,IAAA;YAAxBnB,IAAI,GAAAD,eAAA,CAAJC,IAAI;YAAA,OAAAI,QAAA,CAAAoB,MAAA,WACJhD,GAAG,CAACiD,KAAK,CAACzB,IAAI,CAAC;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAsB,IAAA;QAAA;MAAA,GAAAlC,OAAA;IAAA,CACvB;IAAA,OAAAN,WAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EACD,OAAOL,UAAU;AACnB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}