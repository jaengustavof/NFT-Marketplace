{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar LOAD_HASHER = function LOAD_HASHER(codeOrName) {\n  return Promise.reject(new Error(\"No hasher found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\nexport var Multihashes = /*#__PURE__*/function () {\n  function Multihashes(options) {\n    _classCallCheck(this, Multihashes);\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n    var _iterator = _createForOfIteratorHelper(options.hashers),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var hasher = _step.value;\n        this.addHasher(hasher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  _createClass(Multihashes, [{\n    key: \"addHasher\",\n    value: function addHasher(hasher) {\n      if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(hasher.name, \"\\\"\"));\n      }\n      this._hashersByName[hasher.name] = hasher;\n      this._hashersByCode[hasher.code] = hasher;\n    }\n  }, {\n    key: \"removeHasher\",\n    value: function removeHasher(hasher) {\n      delete this._hashersByName[hasher.name];\n      delete this._hashersByCode[hasher.code];\n    }\n  }, {\n    key: \"getHasher\",\n    value: function () {\n      var _getHasher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(code) {\n        var table, hasher;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n              if (!table[code]) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", table[code]);\n            case 3:\n              _context.next = 5;\n              return this._loadHasher(code);\n            case 5:\n              hasher = _context.sent;\n              if (table[code] == null) {\n                this.addHasher(hasher);\n              }\n              return _context.abrupt(\"return\", hasher);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getHasher(_x) {\n        return _getHasher.apply(this, arguments);\n      }\n      return getHasher;\n    }()\n  }, {\n    key: \"listHashers\",\n    value: function listHashers() {\n      return Object.values(this._hashersByName);\n    }\n  }]);\n  return Multihashes;\n}();","map":{"version":3,"names":["LOAD_HASHER","codeOrName","Promise","reject","Error","concat","Multihashes","options","_classCallCheck","_hashersByName","_hashersByCode","_loadHasher","loadHasher","_iterator","_createForOfIteratorHelper","hashers","_step","s","n","done","hasher","value","addHasher","err","e","f","_createClass","key","name","code","removeHasher","_getHasher","_asyncToGenerator","_regeneratorRuntime","mark","_callee","table","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getHasher","_x","apply","arguments","listHashers","Object","values"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multihashes.js"],"sourcesContent":["const LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${ codeOrName }\"`));\nexport class Multihashes {\n  constructor(options) {\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${ hasher.name }\"`);\n    }\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const hasher = await this._loadHasher(code);\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n    return hasher;\n  }\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}