{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress as _getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n;\n///////////////////////////////\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var name, address;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return nameOrPromise;\n        case 2:\n          name = _context.sent;\n          if (typeof name !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n          }\n          // If it is already an address, just use it (after adding checksum)\n          _context.prev = 4;\n          return _context.abrupt(\"return\", getAddress(name));\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](4);\n        case 10:\n          if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"resolveName\"\n            });\n          }\n          _context.next = 13;\n          return resolver.resolveName(name);\n        case 13:\n          address = _context.sent;\n          if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n          }\n          return _context.abrupt(\"return\", address);\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4, 8]]);\n  }));\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Array.isArray(paramType)) {\n            _context2.next = 4;\n            break;\n          }\n          _context2.next = 3;\n          return Promise.all(paramType.map(function (paramType, index) {\n            return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n          }));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n          if (!(paramType.type === \"address\")) {\n            _context2.next = 8;\n            break;\n          }\n          _context2.next = 7;\n          return resolveName(resolver, value);\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 8:\n          if (!(paramType.type === \"tuple\")) {\n            _context2.next = 12;\n            break;\n          }\n          _context2.next = 11;\n          return resolveAddresses(resolver, value, paramType.components);\n        case 11:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 12:\n          if (!(paramType.baseType === \"array\")) {\n            _context2.next = 18;\n            break;\n          }\n          if (Array.isArray(value)) {\n            _context2.next = 15;\n            break;\n          }\n          return _context2.abrupt(\"return\", Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"value\",\n            value: value\n          })));\n        case 15:\n          _context2.next = 17;\n          return Promise.all(value.map(function (v) {\n            return resolveAddresses(resolver, v, paramType.arrayChildren);\n          }));\n        case 17:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 18:\n          return _context2.abrupt(\"return\", value);\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _this = this;\n    var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          // If an extra argument is given, it is overrides\n          overrides = {};\n          if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n            overrides = shallowCopy(args.pop());\n          }\n          // Make sure the parameter count matches\n          logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n          // Populate \"from\" override (allow promises)\n          if (contract.signer) {\n            if (overrides.from) {\n              // Contracts with a Signer are from the Signer's frame-of-reference;\n              // but we allow overriding \"from\" if it matches the signer\n              overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n              }).then(function (check) {\n                return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        if (getAddress(check.signer) !== check.override) {\n                          logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                          });\n                        }\n                        return _context3.abrupt(\"return\", check.override);\n                      case 2:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n              });\n            } else {\n              overrides.from = contract.signer.getAddress();\n            }\n          } else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n          }\n          // Wait for all dependencies to be resolved (prefer the signer over the provider)\n          _context4.next = 6;\n          return resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: resolveProperties(overrides) || {}\n          });\n        case 6:\n          resolved = _context4.sent;\n          // The ABI coded transaction\n          data = contract.interface.encodeFunctionData(fragment, resolved.args);\n          tx = {\n            data: data,\n            to: resolved.address\n          }; // Resolved Overrides\n          ro = resolved.overrides; // Populate simple overrides\n          if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n          }\n          if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n          }\n          if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n          }\n          if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n          }\n          if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n          }\n          if (ro.from != null) {\n            tx.from = ro.from;\n          }\n          if (ro.type != null) {\n            tx.type = ro.type;\n          }\n          if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n          }\n          // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n          if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            intrinsic = 21000;\n            bytes = arrayify(data);\n            for (i = 0; i < bytes.length; i++) {\n              intrinsic += 4;\n              if (bytes[i]) {\n                intrinsic += 64;\n              }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n          }\n          // Populate \"value\" override\n          if (ro.value) {\n            roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n              logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n              });\n            }\n            tx.value = roValue;\n          }\n          if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n          }\n          // Remove the overrides\n          delete overrides.nonce;\n          delete overrides.gasLimit;\n          delete overrides.gasPrice;\n          delete overrides.from;\n          delete overrides.value;\n          delete overrides.type;\n          delete overrides.accessList;\n          delete overrides.maxFeePerGas;\n          delete overrides.maxPriorityFeePerGas;\n          delete overrides.customData;\n          // Make sure there are no stray overrides, which may indicate a\n          // typo or using an unsupported key.\n          leftovers = Object.keys(overrides).filter(function (key) {\n            return overrides[key] != null;\n          });\n          if (leftovers.length) {\n            logger.throwError(\"cannot override \".concat(leftovers.map(function (l) {\n              return JSON.stringify(l);\n            }).join(\",\")), Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides\",\n              overrides: leftovers\n            });\n          }\n          return _context4.abrupt(\"return\", tx);\n        case 34:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n}\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var tx;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!signerOrProvider) {\n              logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n              });\n            }\n            _context5.next = 3;\n            return populateTransaction(contract, fragment, args);\n          case 3:\n            tx = _context5.sent;\n            _context5.next = 6;\n            return signerOrProvider.estimateGas(tx);\n          case 6:\n            return _context5.abrupt(\"return\", _context5.sent);\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n  };\n}\nfunction addContractWait(contract, tx) {\n  var wait = tx.wait.bind(tx);\n  tx.wait = function (confirmations) {\n    return wait(confirmations).then(function (receipt) {\n      receipt.events = receipt.logs.map(function (log) {\n        var event = deepCopy(log);\n        var parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = function (data, topics) {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = function () {\n          return contract.provider;\n        };\n        event.getBlock = function () {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = function () {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = function () {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var blockTag, overrides, tx, result, value;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            // Extract the \"blockTag\" override if present\n            blockTag = undefined;\n            if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\")) {\n              _context6.next = 9;\n              break;\n            }\n            overrides = shallowCopy(args.pop());\n            if (!(overrides.blockTag != null)) {\n              _context6.next = 7;\n              break;\n            }\n            _context6.next = 6;\n            return overrides.blockTag;\n          case 6:\n            blockTag = _context6.sent;\n          case 7:\n            delete overrides.blockTag;\n            args.push(overrides);\n          case 9:\n            if (!(contract.deployTransaction != null)) {\n              _context6.next = 12;\n              break;\n            }\n            _context6.next = 12;\n            return contract._deployed(blockTag);\n          case 12:\n            _context6.next = 14;\n            return populateTransaction(contract, fragment, args);\n          case 14:\n            tx = _context6.sent;\n            _context6.next = 17;\n            return signerOrProvider.call(tx, blockTag);\n          case 17:\n            result = _context6.sent;\n            _context6.prev = 18;\n            value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n              value = value[0];\n            }\n            return _context6.abrupt(\"return\", value);\n          case 24:\n            _context6.prev = 24;\n            _context6.t0 = _context6[\"catch\"](18);\n            if (_context6.t0.code === Logger.errors.CALL_EXCEPTION) {\n              _context6.t0.address = contract.address;\n              _context6.t0.args = args;\n              _context6.t0.transaction = tx;\n            }\n            throw _context6.t0;\n          case 28:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[18, 24]]);\n    }));\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var txRequest, tx;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            if (!contract.signer) {\n              logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n              });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (!(contract.deployTransaction != null)) {\n              _context7.next = 4;\n              break;\n            }\n            _context7.next = 4;\n            return contract._deployed();\n          case 4:\n            _context7.next = 6;\n            return populateTransaction(contract, fragment, args);\n          case 6:\n            txRequest = _context7.sent;\n            _context7.next = 9;\n            return contract.signer.sendTransaction(txRequest);\n          case 9:\n            tx = _context7.sent;\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return _context7.abrupt(\"return\", tx);\n          case 12:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nvar RunningEvent = /*#__PURE__*/function () {\n  function RunningEvent(tag, filter) {\n    _classCallCheck(this, RunningEvent);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  _createClass(RunningEvent, [{\n    key: \"addListener\",\n    value: function addListener(listener, once) {\n      this._listeners.push({\n        listener: listener,\n        once: once\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var done = false;\n      this._listeners = this._listeners.filter(function (item) {\n        if (done || item.listener !== listener) {\n          return true;\n        }\n        done = true;\n        return false;\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners() {\n      return this._listeners.map(function (i) {\n        return i.listener;\n      });\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount() {\n      return this._listeners.length;\n    }\n  }, {\n    key: \"run\",\n    value: function run(args) {\n      var _this2 = this;\n      var listenerCount = this.listenerCount();\n      this._listeners = this._listeners.filter(function (item) {\n        var argsCopy = args.slice();\n        // Call the callback in the next event loop\n        setTimeout(function () {\n          item.listener.apply(_this2, argsCopy);\n        }, 0);\n        // Reschedule it if it not \"once\"\n        return !item.once;\n      });\n      return listenerCount;\n    }\n  }, {\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {}\n    // Returns the array that will be applied to an emit\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      return [event];\n    }\n  }]);\n  return RunningEvent;\n}();\nvar ErrorRunningEvent = /*#__PURE__*/function (_RunningEvent) {\n  _inherits(ErrorRunningEvent, _RunningEvent);\n  var _super = _createSuper(ErrorRunningEvent);\n  function ErrorRunningEvent() {\n    _classCallCheck(this, ErrorRunningEvent);\n    return _super.call(this, \"error\", null);\n  }\n  return _createClass(ErrorRunningEvent);\n}(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nvar FragmentRunningEvent = /*#__PURE__*/function (_RunningEvent2) {\n  _inherits(FragmentRunningEvent, _RunningEvent2);\n  var _super2 = _createSuper(FragmentRunningEvent);\n  function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n    var _this3;\n    _classCallCheck(this, FragmentRunningEvent);\n    var filter = {\n      address: address\n    };\n    var topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    _this3 = _super2.call(this, getEventTag(filter), filter);\n    defineReadOnly(_assertThisInitialized(_this3), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this3), \"interface\", contractInterface);\n    defineReadOnly(_assertThisInitialized(_this3), \"fragment\", fragment);\n    return _this3;\n  }\n  _createClass(FragmentRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this4 = this;\n      _get(_getPrototypeOf(FragmentRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n      event.event = this.fragment.name;\n      event.eventSignature = this.fragment.format();\n      event.decode = function (data, topics) {\n        return _this4.interface.decodeEventLog(_this4.fragment, data, topics);\n      };\n      try {\n        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n      } catch (error) {\n        event.args = null;\n        event.decodeError = error;\n      }\n    }\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      var errors = checkResultErrors(event.args);\n      if (errors.length) {\n        throw errors[0].error;\n      }\n      var args = (event.args || []).slice();\n      args.push(event);\n      return args;\n    }\n  }]);\n  return FragmentRunningEvent;\n}(RunningEvent); // A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nvar WildcardRunningEvent = /*#__PURE__*/function (_RunningEvent3) {\n  _inherits(WildcardRunningEvent, _RunningEvent3);\n  var _super3 = _createSuper(WildcardRunningEvent);\n  function WildcardRunningEvent(address, contractInterface) {\n    var _this5;\n    _classCallCheck(this, WildcardRunningEvent);\n    _this5 = _super3.call(this, \"*\", {\n      address: address\n    });\n    defineReadOnly(_assertThisInitialized(_this5), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this5), \"interface\", contractInterface);\n    return _this5;\n  }\n  _createClass(WildcardRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this6 = this;\n      _get(_getPrototypeOf(WildcardRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n      try {\n        var parsed = this.interface.parseLog(event);\n        event.event = parsed.name;\n        event.eventSignature = parsed.signature;\n        event.decode = function (data, topics) {\n          return _this6.interface.decodeEventLog(parsed.eventFragment, data, topics);\n        };\n        event.args = parsed.args;\n      } catch (error) {\n        // No matching event\n      }\n    }\n  }]);\n  return WildcardRunningEvent;\n}(RunningEvent);\nexport var BaseContract = /*#__PURE__*/function () {\n  function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n    var _this7 = this;\n    _classCallCheck(this, BaseContract);\n    logger.checkNew(this instanceof BaseContract ? this.constructor : void 0, Contract);\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof BaseContract ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      var uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(function (eventSignature) {\n        var event = _this7.interface.events[eventSignature];\n        defineReadOnly(_this7.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n          return {\n            address: _this7.address,\n            topics: _this7.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(function (name) {\n        var filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(_this7.filters, name, _this7.filters[filters[0]]);\n        } else {\n          logger.warn(\"Duplicate definition of \".concat(name, \" (\").concat(filters.join(\", \"), \")\"));\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    var uniqueNames = {};\n    var uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(function (signature) {\n      var fragment = _this7.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(\"Duplicate ABI entry for \".concat(JSON.stringify(signature)));\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        var name = fragment.name;\n        if (!uniqueNames[\"%\".concat(name)]) {\n          uniqueNames[\"%\".concat(name)] = [];\n        }\n        uniqueNames[\"%\".concat(name)].push(signature);\n      }\n      if (_this7[signature] == null) {\n        defineReadOnly(_this7, signature, buildDefault(_this7, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (_this7.functions[signature] == null) {\n        defineReadOnly(_this7.functions, signature, buildDefault(_this7, fragment, false));\n      }\n      if (_this7.callStatic[signature] == null) {\n        defineReadOnly(_this7.callStatic, signature, buildCall(_this7, fragment, true));\n      }\n      if (_this7.populateTransaction[signature] == null) {\n        defineReadOnly(_this7.populateTransaction, signature, buildPopulate(_this7, fragment));\n      }\n      if (_this7.estimateGas[signature] == null) {\n        defineReadOnly(_this7.estimateGas, signature, buildEstimate(_this7, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(function (name) {\n      // Ambiguous names to not get attached as bare names\n      var signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      var signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (_this7[name] == null) {\n          defineReadOnly(_this7, name, _this7[signature]);\n        }\n      } catch (e) {}\n      if (_this7.functions[name] == null) {\n        defineReadOnly(_this7.functions, name, _this7.functions[signature]);\n      }\n      if (_this7.callStatic[name] == null) {\n        defineReadOnly(_this7.callStatic, name, _this7.callStatic[signature]);\n      }\n      if (_this7.populateTransaction[name] == null) {\n        defineReadOnly(_this7.populateTransaction, name, _this7.populateTransaction[signature]);\n      }\n      if (_this7.estimateGas[name] == null) {\n        defineReadOnly(_this7.estimateGas, name, _this7.estimateGas[signature]);\n      }\n    });\n  }\n  _createClass(BaseContract, [{\n    key: \"deployed\",\n    value:\n    // @TODO: Allow timeout?\n    function deployed() {\n      return this._deployed();\n    }\n  }, {\n    key: \"_deployed\",\n    value: function _deployed(blockTag) {\n      var _this8 = this;\n      if (!this._deployedPromise) {\n        // If we were just deployed, we know the transaction we should occur in\n        if (this.deployTransaction) {\n          this._deployedPromise = this.deployTransaction.wait().then(function () {\n            return _this8;\n          });\n        } else {\n          // @TODO: Once we allow a timeout to be passed in, we will wait\n          // up to that many blocks for getCode\n          // Otherwise, poll for our code to be deployed\n          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n            if (code === \"0x\") {\n              logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                contractAddress: _this8.address,\n                operation: \"getDeployed\"\n              });\n            }\n            return _this8;\n          });\n        }\n      }\n      return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  }, {\n    key: \"fallback\",\n    value: function fallback(overrides) {\n      var _this9 = this;\n      if (!this.signer) {\n        logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction(fallback)\"\n        });\n      }\n      var tx = shallowCopy(overrides || {});\n      [\"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      tx.to = this.resolvedAddress;\n      return this.deployed().then(function () {\n        return _this9.signer.sendTransaction(tx);\n      });\n    }\n    // Reconnect to a different signer or provider\n  }, {\n    key: \"connect\",\n    value: function connect(signerOrProvider) {\n      if (typeof signerOrProvider === \"string\") {\n        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n      }\n      var contract = new this.constructor(this.address, this.interface, signerOrProvider);\n      if (this.deployTransaction) {\n        defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n      }\n      return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n  }, {\n    key: \"attach\",\n    value: function attach(addressOrName) {\n      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n    }\n  }, {\n    key: \"_normalizeRunningEvent\",\n    value: function _normalizeRunningEvent(runningEvent) {\n      // Already have an instance of this event running; we can re-use it\n      if (this._runningEvents[runningEvent.tag]) {\n        return this._runningEvents[runningEvent.tag];\n      }\n      return runningEvent;\n    }\n  }, {\n    key: \"_getRunningEvent\",\n    value: function _getRunningEvent(eventName) {\n      if (typeof eventName === \"string\") {\n        // Listen for \"error\" events (if your contract has an error event, include\n        // the full signature to bypass this special event keyword)\n        if (eventName === \"error\") {\n          return this._normalizeRunningEvent(new ErrorRunningEvent());\n        }\n        // Listen for any event that is registered\n        if (eventName === \"event\") {\n          return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n        }\n        // Listen for any event\n        if (eventName === \"*\") {\n          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n        }\n        // Get the event Fragment (throws if ambiguous/unknown event)\n        var fragment = this.interface.getEvent(eventName);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n      }\n      // We have topics to filter by...\n      if (eventName.topics && eventName.topics.length > 0) {\n        // Is it a known topichash? (throws if no matching topichash)\n        try {\n          var topic = eventName.topics[0];\n          if (typeof topic !== \"string\") {\n            throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n          }\n\n          var _fragment = this.interface.getEvent(topic);\n          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, _fragment, eventName.topics));\n        } catch (error) {}\n        // Filter by the unknown topichash\n        var filter = {\n          address: this.address,\n          topics: eventName.topics\n        };\n        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n      }\n      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n  }, {\n    key: \"_checkRunningEvents\",\n    value: function _checkRunningEvents(runningEvent) {\n      if (runningEvent.listenerCount() === 0) {\n        delete this._runningEvents[runningEvent.tag];\n        // If we have a poller for this, remove it\n        var emit = this._wrappedEmits[runningEvent.tag];\n        if (emit && runningEvent.filter) {\n          this.provider.off(runningEvent.filter, emit);\n          delete this._wrappedEmits[runningEvent.tag];\n        }\n      }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n  }, {\n    key: \"_wrapEvent\",\n    value: function _wrapEvent(runningEvent, log, listener) {\n      var _this10 = this;\n      var event = deepCopy(log);\n      event.removeListener = function () {\n        if (!listener) {\n          return;\n        }\n        runningEvent.removeListener(listener);\n        _this10._checkRunningEvents(runningEvent);\n      };\n      event.getBlock = function () {\n        return _this10.provider.getBlock(log.blockHash);\n      };\n      event.getTransaction = function () {\n        return _this10.provider.getTransaction(log.transactionHash);\n      };\n      event.getTransactionReceipt = function () {\n        return _this10.provider.getTransactionReceipt(log.transactionHash);\n      };\n      // This may throw if the topics and data mismatch the signature\n      runningEvent.prepareEvent(event);\n      return event;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(runningEvent, listener, once) {\n      var _this11 = this;\n      if (!this.provider) {\n        logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"once\"\n        });\n      }\n      runningEvent.addListener(listener, once);\n      // Track this running event and its listeners (may already be there; but no hard in updating)\n      this._runningEvents[runningEvent.tag] = runningEvent;\n      // If we are not polling the provider, start polling\n      if (!this._wrappedEmits[runningEvent.tag]) {\n        var wrappedEmit = function wrappedEmit(log) {\n          var event = _this11._wrapEvent(runningEvent, log, listener);\n          // Try to emit the result for the parameterized event...\n          if (event.decodeError == null) {\n            try {\n              var args = runningEvent.getEmit(event);\n              _this11.emit.apply(_this11, [runningEvent.filter].concat(_toConsumableArray(args)));\n            } catch (error) {\n              event.decodeError = error.error;\n            }\n          }\n          // Always emit \"event\" for fragment-base events\n          if (runningEvent.filter != null) {\n            _this11.emit(\"event\", event);\n          }\n          // Emit \"error\" if there was an error\n          if (event.decodeError != null) {\n            _this11.emit(\"error\", event.decodeError, event);\n          }\n        };\n        this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n        // Special events, like \"error\" do not have a filter\n        if (runningEvent.filter != null) {\n          this.provider.on(runningEvent.filter, wrappedEmit);\n        }\n      }\n    }\n  }, {\n    key: \"queryFilter\",\n    value: function queryFilter(event, fromBlockOrBlockhash, toBlock) {\n      var _this12 = this;\n      var runningEvent = this._getRunningEvent(event);\n      var filter = shallowCopy(runningEvent.filter);\n      if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n        if (toBlock != null) {\n          logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n        }\n        filter.blockHash = fromBlockOrBlockhash;\n      } else {\n        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n        filter.toBlock = toBlock != null ? toBlock : \"latest\";\n      }\n      return this.provider.getLogs(filter).then(function (logs) {\n        return logs.map(function (log) {\n          return _this12._wrapEvent(runningEvent, log, null);\n        });\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, false);\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, true);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      if (!this.provider) {\n        return false;\n      }\n      var runningEvent = this._getRunningEvent(eventName);\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n      var result = runningEvent.run(args) > 0;\n      // May have drained all the \"once\" events; check for living events\n      this._checkRunningEvents(runningEvent);\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      var _this13 = this;\n      if (!this.provider) {\n        return 0;\n      }\n      if (eventName == null) {\n        return Object.keys(this._runningEvents).reduce(function (accum, key) {\n          return accum + _this13._runningEvents[key].listenerCount();\n        }, 0);\n      }\n      return this._getRunningEvent(eventName).listenerCount();\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (!this.provider) {\n        return [];\n      }\n      if (eventName == null) {\n        var result = [];\n        for (var tag in this._runningEvents) {\n          this._runningEvents[tag].listeners().forEach(function (listener) {\n            result.push(listener);\n          });\n        }\n        return result;\n      }\n      return this._getRunningEvent(eventName).listeners();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      if (!this.provider) {\n        return this;\n      }\n      if (eventName == null) {\n        for (var tag in this._runningEvents) {\n          var _runningEvent = this._runningEvents[tag];\n          _runningEvent.removeAllListeners();\n          this._checkRunningEvents(_runningEvent);\n        }\n        return this;\n      }\n      // Delete any listeners\n      var runningEvent = this._getRunningEvent(eventName);\n      runningEvent.removeAllListeners();\n      this._checkRunningEvents(runningEvent);\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      if (!this.provider) {\n        return this;\n      }\n      var runningEvent = this._getRunningEvent(eventName);\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"getContractAddress\",\n    value: function getContractAddress(transaction) {\n      return _getContractAddress(transaction);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      if (Interface.isInterface(contractInterface)) {\n        return contractInterface;\n      }\n      return new Interface(contractInterface);\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return Indexed.isIndexed(value);\n    }\n  }]);\n  return BaseContract;\n}();\nexport var Contract = /*#__PURE__*/function (_BaseContract) {\n  _inherits(Contract, _BaseContract);\n  var _super4 = _createSuper(Contract);\n  function Contract() {\n    _classCallCheck(this, Contract);\n    return _super4.apply(this, arguments);\n  }\n  return _createClass(Contract);\n}(BaseContract);\nexport var ContractFactory = /*#__PURE__*/function () {\n  function ContractFactory(contractInterface, bytecode, signer) {\n    _classCallCheck(this, ContractFactory);\n    var bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof ContractFactory ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  _createClass(ContractFactory, [{\n    key: \"getDeployTransaction\",\n    value: function getDeployTransaction() {\n      var tx = {};\n      // If we have 1 additional argument, we allow transaction overrides\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        tx = shallowCopy(args.pop());\n        for (var key in tx) {\n          if (!allowedTransactionKeys[key]) {\n            throw new Error(\"unknown transaction override \" + key);\n          }\n        }\n      }\n      // Do not allow these to be overridden in a deployment transaction\n      [\"data\", \"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      if (tx.value) {\n        var value = BigNumber.from(tx.value);\n        if (!value.isZero() && !this.interface.deploy.payable) {\n          logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides.value\",\n            value: tx.value\n          });\n        }\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Set the data to the bytecode + the encoded constructor arguments\n      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n      return tx;\n    }\n  }, {\n    key: \"deploy\",\n    value: function deploy() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var overrides, params, unsignedTx, tx, address, contract;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n              if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n              }\n              // Make sure the call matches the constructor signature\n              logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n              // Resolve ENS names and promises in the arguments\n              _context8.next = 5;\n              return resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            case 5:\n              params = _context8.sent;\n              params.push(overrides);\n              // Get the deployment transaction (with optional overrides)\n              unsignedTx = this.getDeployTransaction.apply(this, _toConsumableArray(params)); // Send the deployment transaction\n              _context8.next = 10;\n              return this.signer.sendTransaction(unsignedTx);\n            case 10:\n              tx = _context8.sent;\n              address = getStatic(this.constructor, \"getContractAddress\")(tx);\n              contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer); // Add the modified wait that wraps events\n              addContractWait(contract, tx);\n              defineReadOnly(contract, \"deployTransaction\", tx);\n              return _context8.abrupt(\"return\", contract);\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(address) {\n      return this.constructor.getContract(address, this.interface, this.signer);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(signer) {\n      return new this.constructor(this.interface, this.bytecode, signer);\n    }\n  }], [{\n    key: \"fromSolidity\",\n    value: function fromSolidity(compilerOutput, signer) {\n      if (compilerOutput == null) {\n        logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n          argument: \"compilerOutput\"\n        });\n      }\n      if (typeof compilerOutput === \"string\") {\n        compilerOutput = JSON.parse(compilerOutput);\n      }\n      var abi = compilerOutput.abi;\n      var bytecode = null;\n      if (compilerOutput.bytecode) {\n        bytecode = compilerOutput.bytecode;\n      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n        bytecode = compilerOutput.evm.bytecode;\n      }\n      return new this(abi, bytecode, signer);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      return Contract.getInterface(contractInterface);\n    }\n  }, {\n    key: \"getContractAddress\",\n    value: function getContractAddress(tx) {\n      return _getContractAddress(tx);\n    }\n  }, {\n    key: \"getContract\",\n    value: function getContract(address, contractInterface, signer) {\n      return new Contract(address, contractInterface, signer);\n    }\n  }]);\n  return ContractFactory;\n}();","map":{"version":3,"names":["_toConsumableArray","_assertThisInitialized","_get","_getPrototypeOf","_inherits","_createSuper","_classCallCheck","_createClass","_regeneratorRuntime","checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","resolveName","resolver","nameOrPromise","name","_context","sent","throwArgumentError","prev","abrupt","t0","throwError","errors","UNSUPPORTED_OPERATION","operation","next","address","stop","_callee","resolveAddresses","paramType","Array","isArray","_context2","Promise","all","map","index","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","_callee2","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","_this","mark","_callee3","wrap","_callee3$","_context3","provider","_context4","resolvedAddress","resolved","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","_callee4","buildPopulate","_len","arguments","_key","buildEstimate","signerOrProvider","_len2","_key2","_context5","estimateGas","_callee5","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","_len3","_key3","blockTag","undefined","_context6","push","deployTransaction","_deployed","call","result","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","_callee6","buildSend","_len4","_key4","_context7","txRequest","sendTransaction","_callee7","buildDefault","constant","getEventTag","topic","RunningEvent","tag","_listeners","addListener","listener","once","done","item","removeAllListeners","listeners","listenerCount","run","_this2","argsCopy","slice","setTimeout","apply","prepareEvent","getEmit","ErrorRunningEvent","_RunningEvent","_super","FragmentRunningEvent","_RunningEvent2","_super2","contractInterface","_this3","getEventTopic","_this4","prototype","format","error","decodeError","WildcardRunningEvent","_RunningEvent3","_super3","_this5","_this6","BaseContract","addressOrName","_this7","checkNew","constructor","Contract","isSigner","isProvider","uniqueFilters","forEach","filters","_len5","_key5","encodeFilterTopics","warn","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","deployed","_this8","_deployedPromise","getCode","contractAddress","fallback","_this9","connect","attach","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","Error","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_this10","_addEventListener","_this11","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","_this12","fromBlock","getLogs","_len6","_key6","_this13","reduce","accum","getInterface","isInterface","isIndexed","_BaseContract","_super4","ContractFactory","bytecode","bytecodeHex","object","getDeployTransaction","_len7","_key7","deploy","encodeDeploy","_len8","_key8","_context8","params","unsignedTx","_callee8","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","parse","abi","evm"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/@ethersproject/contracts/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        logger.checkNew(new.target, Contract);\n\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}