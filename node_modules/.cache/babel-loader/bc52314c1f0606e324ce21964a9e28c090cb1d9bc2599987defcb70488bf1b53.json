{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar LOAD_CODEC = function LOAD_CODEC(codeOrName) {\n  return Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\nexport var Multicodecs = /*#__PURE__*/function () {\n  function Multicodecs(options) {\n    _classCallCheck(this, Multicodecs);\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    var _iterator = _createForOfIteratorHelper(options.codecs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var codec = _step.value;\n        this.addCodec(codec);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  _createClass(Multicodecs, [{\n    key: \"addCodec\",\n    value: function addCodec(codec) {\n      if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n      }\n      this._codecsByName[codec.name] = codec;\n      this._codecsByCode[codec.code] = codec;\n    }\n  }, {\n    key: \"removeCodec\",\n    value: function removeCodec(codec) {\n      delete this._codecsByName[codec.name];\n      delete this._codecsByCode[codec.code];\n    }\n  }, {\n    key: \"getCodec\",\n    value: function () {\n      var _getCodec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(code) {\n        var table, codec;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n              if (!table[code]) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", table[code]);\n            case 3:\n              _context.next = 5;\n              return this._loadCodec(code);\n            case 5:\n              codec = _context.sent;\n              if (table[code] == null) {\n                this.addCodec(codec);\n              }\n              return _context.abrupt(\"return\", codec);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getCodec(_x) {\n        return _getCodec.apply(this, arguments);\n      }\n      return getCodec;\n    }()\n  }, {\n    key: \"listCodecs\",\n    value: function listCodecs() {\n      return Object.values(this._codecsByName);\n    }\n  }]);\n  return Multicodecs;\n}();","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","concat","Multicodecs","options","_classCallCheck","_codecsByName","_codecsByCode","_loadCodec","loadCodec","_iterator","_createForOfIteratorHelper","codecs","_step","s","n","done","codec","value","addCodec","err","e","f","_createClass","key","name","code","removeCodec","_getCodec","_asyncToGenerator","_regeneratorRuntime","mark","_callee","table","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getCodec","_x","apply","arguments","listCodecs","Object","values"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multicodecs.js"],"sourcesContent":["const LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nexport class Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}"],"mappings":";;;;;AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAUA,CAAGC,UAAU;EAAA,OAAIC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,yBAAAC,MAAA,CAAyBJ,UAAU,OAAI,CAAC,CAAC;AAAA;AAClG,WAAaK,WAAW;EACtB,SAAAA,YAAYC,OAAO,EAAE;IAAAC,eAAA,OAAAF,WAAA;IACnB,IAAI,CAACG,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACK,SAAS,IAAIZ,UAAU;IAAC,IAAAa,SAAA,GAAAC,0BAAA,CAC9BP,OAAO,CAACQ,MAAM;MAAAC,KAAA;IAAA;MAAlC,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAAoC;QAAA,IAAzBC,KAAK,GAAAJ,KAAA,CAAAK,KAAA;QACd,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC;MACtB;IAAC,SAAAG,GAAA;MAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;IAAA;MAAAV,SAAA,CAAAY,CAAA;IAAA;EACH;EAACC,YAAA,CAAApB,WAAA;IAAAqB,GAAA;IAAAN,KAAA,EACD,SAAAC,SAASF,KAAK,EAAE;MACd,IAAI,IAAI,CAACX,aAAa,CAACW,KAAK,CAACQ,IAAI,CAAC,IAAI,IAAI,CAAClB,aAAa,CAACU,KAAK,CAACS,IAAI,CAAC,EAAE;QACpE,MAAM,IAAIzB,KAAK,wCAAAC,MAAA,CAAwCe,KAAK,CAACQ,IAAI,OAAI,CAAC;MACxE;MACA,IAAI,CAACnB,aAAa,CAACW,KAAK,CAACQ,IAAI,CAAC,GAAGR,KAAK;MACtC,IAAI,CAACV,aAAa,CAACU,KAAK,CAACS,IAAI,CAAC,GAAGT,KAAK;IACxC;EAAC;IAAAO,GAAA;IAAAN,KAAA,EACD,SAAAS,YAAYV,KAAK,EAAE;MACjB,OAAO,IAAI,CAACX,aAAa,CAACW,KAAK,CAACQ,IAAI,CAAC;MACrC,OAAO,IAAI,CAAClB,aAAa,CAACU,KAAK,CAACS,IAAI,CAAC;IACvC;EAAC;IAAAF,GAAA;IAAAN,KAAA;MAAA,IAAAU,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CACD,SAAAC,QAAeN,IAAI;QAAA,IAAAO,KAAA,EAAAhB,KAAA;QAAA,OAAAa,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACXL,KAAK,GAAG,OAAOP,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACpB,aAAa,GAAG,IAAI,CAACC,aAAa;cAAA,KAC5E0B,KAAK,CAACP,IAAI,CAAC;gBAAAU,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WACNN,KAAK,CAACP,IAAI,CAAC;YAAA;cAAAU,QAAA,CAAAE,IAAA;cAAA,OAEA,IAAI,CAAC9B,UAAU,CAACkB,IAAI,CAAC;YAAA;cAAnCT,KAAK,GAAAmB,QAAA,CAAAI,IAAA;cACX,IAAIP,KAAK,CAACP,IAAI,CAAC,IAAI,IAAI,EAAE;gBACvB,IAAI,CAACP,QAAQ,CAACF,KAAK,CAAC;cACtB;cAAC,OAAAmB,QAAA,CAAAG,MAAA,WACMtB,KAAK;YAAA;YAAA;cAAA,OAAAmB,QAAA,CAAAK,IAAA;UAAA;QAAA,GAAAT,OAAA;MAAA,CACb;MAAA,SAAAU,SAAAC,EAAA;QAAA,OAAAf,SAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,QAAA;IAAA;EAAA;IAAAlB,GAAA;IAAAN,KAAA,EACD,SAAA4B,WAAA,EAAa;MACX,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC1C,aAAa,CAAC;IAC1C;EAAC;EAAA,OAAAH,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}