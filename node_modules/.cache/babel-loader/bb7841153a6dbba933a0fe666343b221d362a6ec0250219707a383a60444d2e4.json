{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * React Router v6.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nvar alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nvar NavigationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nvar LocationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nvar RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nfunction MemoryRouter(_ref) {\n  var basename = _ref.basename,\n    children = _ref.children,\n    initialEntries = _ref.initialEntries,\n    initialIndex = _ref.initialIndex;\n  var historyRef = useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries: initialEntries,\n      initialIndex: initialIndex\n    });\n  }\n  var history = historyRef.current;\n  var _useState = useState({\n      action: history.action,\n      location: history.location\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nfunction Navigate(_ref2) {\n  var to = _ref2.to,\n    replace = _ref2.replace,\n    state = _ref2.state;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  var navigate = useNavigate();\n  useEffect(function () {\n    navigate(to, {\n      replace: replace,\n      state: state\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nfunction Router(_ref3) {\n  var _ref3$basename = _ref3.basename,\n    basenameProp = _ref3$basename === void 0 ? \"/\" : _ref3$basename,\n    _ref3$children = _ref3.children,\n    children = _ref3$children === void 0 ? null : _ref3$children,\n    locationProp = _ref3.location,\n    _ref3$navigationType = _ref3.navigationType,\n    navigationType = _ref3$navigationType === void 0 ? Action.Pop : _ref3$navigationType,\n    navigator = _ref3.navigator,\n    _ref3$static = _ref3.static,\n    staticProp = _ref3$static === void 0 ? false : _ref3$static;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  var basename = normalizePathname(basenameProp);\n  var navigationContext = useMemo(function () {\n    return {\n      basename: basename,\n      navigator: navigator,\n      static: staticProp\n    };\n  }, [basename, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  var _locationProp = locationProp,\n    _locationProp$pathnam = _locationProp.pathname,\n    pathname = _locationProp$pathnam === void 0 ? \"/\" : _locationProp$pathnam,\n    _locationProp$search = _locationProp.search,\n    search = _locationProp$search === void 0 ? \"\" : _locationProp$search,\n    _locationProp$hash = _locationProp.hash,\n    hash = _locationProp$hash === void 0 ? \"\" : _locationProp$hash,\n    _locationProp$state = _locationProp.state,\n    state = _locationProp$state === void 0 ? null : _locationProp$state,\n    _locationProp$key = _locationProp.key,\n    key = _locationProp$key === void 0 ? \"default\" : _locationProp$key;\n  var location = useMemo(function () {\n    var trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      pathname: trailingPathname,\n      search: search,\n      hash: hash,\n      state: state,\n      key: key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (location == null) {\n    return null;\n  }\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location: location,\n      navigationType: navigationType\n    }\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nfunction Routes(_ref4) {\n  var children = _ref4.children,\n    location = _ref4.location;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  var _useContext = useContext(NavigationContext),\n    basename = _useContext.basename,\n    navigator = _useContext.navigator;\n  var _useResolvedPath = useResolvedPath(to),\n    hash = _useResolvedPath.hash,\n    pathname = _useResolvedPath.pathname,\n    search = _useResolvedPath.search;\n  var joinedPathname = pathname;\n  if (basename !== \"/\") {\n    var toPathname = getToPathname(to);\n    var endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search: search,\n    hash: hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  var _useLocation = useLocation(),\n    pathname = _useLocation.pathname;\n  return useMemo(function () {\n    return matchPath(pattern, pathname);\n  }, [pathname, pattern]);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  var _useContext2 = useContext(NavigationContext),\n    basename = _useContext2.basename,\n    navigator = _useContext2.navigator;\n  var _useContext3 = useContext(RouteContext),\n    matches = _useContext3.matches;\n  var _useLocation2 = useLocation(),\n    locationPathname = _useLocation2.pathname;\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  var activeRef = useRef(false);\n  useEffect(function () {\n    activeRef.current = true;\n  });\n  var navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    var path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\nvar OutletContext = /*#__PURE__*/createContext(null);\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\n\nfunction useOutletContext() {\n  return useContext(OutletContext);\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\nfunction useOutlet(context) {\n  var outlet = useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\nfunction useParams() {\n  var _useContext4 = useContext(RouteContext),\n    matches = _useContext4.matches;\n  var routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\nfunction useResolvedPath(to) {\n  var _useContext5 = useContext(RouteContext),\n    matches = _useContext5.matches;\n  var _useLocation3 = useLocation(),\n    locationPathname = _useLocation3.pathname;\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  return useMemo(function () {\n    return resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n  }, [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  var _useContext6 = useContext(RouteContext),\n    parentMatches = _useContext6.matches;\n  var routeMatch = parentMatches[parentMatches.length - 1];\n  var parentParams = routeMatch ? routeMatch.params : {};\n  var parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  var parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  var parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    var parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  var locationFromContext = useLocation();\n  var location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    var parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  var pathname = location.pathname || \"/\";\n  var remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  var matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  return _renderMatches(matches && matches.map(function (match) {\n    return Object.assign({}, match, {\n      params: Object.assign({}, parentParams, match.params),\n      pathname: joinPaths([parentPathnameBase, match.pathname]),\n      pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n    });\n  }), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\nfunction createRoutesFromChildren(children) {\n  var routes = [];\n  Children.forEach(children, function (element) {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    var route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, function (_) {\n    return params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\");\n  });\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (matches == null) return null;\n  return matches.reduceRight(function (outlet, match, index) {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet: outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    :\n    // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|\\\\/|$)\";\n  }\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref5 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref5.pathname,\n    _ref5$search = _ref5.search,\n    search = _ref5$search === void 0 ? \"\" : _ref5$search,\n    _ref5$hash = _ref5.hash,\n    hash = _ref5$hash === void 0 ? \"\" : _ref5$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  var to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  var toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  var from;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  var nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(basename.length) || \"/\";\n}\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n}; ///////////////////////////////////////////////////////////////////////////////\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes };","map":{"version":3,"names":["invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","env","NODE_ENV","NavigationContext","createContext","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","_ref","basename","children","initialEntries","initialIndex","historyRef","useRef","current","createMemoryHistory","history","_useState","useState","action","location","_useState2","_slicedToArray","state","setState","useLayoutEffect","listen","createElement","Router","navigationType","navigator","Navigate","_ref2","to","replace","useInRouterContext","useContext","static","navigate","useNavigate","useEffect","Outlet","props","useOutlet","context","Route","_props","_ref3","_ref3$basename","basenameProp","_ref3$children","locationProp","_ref3$navigationType","Action","Pop","_ref3$static","staticProp","normalizePathname","navigationContext","useMemo","parsePath","_locationProp","_locationProp$pathnam","pathname","_locationProp$search","search","_locationProp$hash","hash","_locationProp$state","_locationProp$key","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","_useContext","_useResolvedPath","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","_useLocation","matchPath","_useContext2","_useContext3","_useLocation2","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","useCallback","options","go","path","resolveTo","parse","push","OutletContext","useOutletContext","useParams","_useContext4","routeMatch","length","params","_useContext5","_useLocation3","routes","locationArg","_useContext6","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","Children","forEach","isValidElement","type","Fragment","apply","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","matchedParams","matchedPathname","end","renderMatches","reduceRight","_compilePath","compilePath","_compilePath2","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","_ref5","_ref5$search","_ref5$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths"],"sources":["/home/gustavo/blockchain/packages/react-router/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\ntype ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObject;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}