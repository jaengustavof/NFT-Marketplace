{"ast":null,"code":"'use strict';\n\nconst convert = require('./convert');\nconst protocols = require('./protocols-table');\nconst varint = require('varint');\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n  bytesToTuples,\n  tuplesToBytes,\n  bytesToString,\n  stringToBytes,\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n  ParseError,\n  protoFromTuple,\n  sizeForAddr\n};\n\n// string -> [[str name, str addr]... ]\n/**\n * @param {string} str\n */\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols(part);\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n    p++; // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([part,\n      // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n    tuples.push([part, parts[p]]);\n  }\n  return tuples;\n}\n\n// [[str name, str addr]... ] -> string\n/**\n * @param {[number, string?][]} tuples\n */\nfunction stringTuplesToString(tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\nfunction tuplesToBytes(tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map(( /** @type {any[]} */tup) => {\n    const proto = protoFromTuple(tup);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n}\n\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\nfunction bytesToTuples(buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = [];\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n  }\n  return tuples;\n}\n\n// Uint8Array -> String\n/**\n * @param {Uint8Array} buf\n */\nfunction bytesToString(buf) {\n  const a = bytesToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction stringToBytes(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBytes(b);\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction fromString(str) {\n  return stringToBytes(str);\n}\n\n// Uint8Array -> Uint8Array\n/**\n * @param {Uint8Array} buf\n */\nfunction fromBytes(buf) {\n  const err = validateBytes(buf);\n  if (err) throw err;\n  return Uint8Array.from(buf); // copy\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction validateBytes(buf) {\n  try {\n    bytesToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction isValidBytes(buf) {\n  return validateBytes(buf) === undefined;\n}\n\n/**\n * @param {string} str\n */\nfunction cleanPath(str) {\n  return '/' + str.trim().split('/').filter(( /** @type {any} */a) => a).join('/');\n}\n\n/**\n * @param {string} str\n */\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\n\n/**\n * @param {any[]} tup\n */\nfunction protoFromTuple(tup) {\n  const proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"names":["convert","require","protocols","varint","concat","uint8ArrayConcat","toString","uint8ArrayToString","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bytesToTuples","tuplesToBytes","bytesToString","stringToBytes","fromString","fromBytes","validateBytes","isValidBytes","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","path","join","map","tup","name","Array","isArray","code","toBytes","buf","Uint8Array","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","filter","Error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr/src/codec.js"],"sourcesContent":["'use strict'\n\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bytesToTuples,\n  tuplesToBytes,\n\n  bytesToString,\n  stringToBytes,\n\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\n/**\n * @param {string} str\n */\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\n/**\n * @param {[number, string?][]} tuples\n */\nfunction stringTuplesToString (tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\nfunction tuplesToBytes (tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\nfunction bytesToTuples (buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Uint8Array -> String\n/**\n * @param {Uint8Array} buf\n */\nfunction bytesToString (buf) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction stringToBytes (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction fromString (str) {\n  return stringToBytes(str)\n}\n\n// Uint8Array -> Uint8Array\n/**\n * @param {Uint8Array} buf\n */\nfunction fromBytes (buf) {\n  const err = validateBytes(buf)\n  if (err) throw err\n  return Uint8Array.from(buf) // copy\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction validateBytes (buf) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction isValidBytes (buf) {\n  return validateBytes(buf) === undefined\n}\n\n/**\n * @param {string} str\n */\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter((/** @type {any} */ a) => a).join('/')\n}\n\n/**\n * @param {string} str\n */\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\n/**\n * @param {any[]} tup\n */\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}