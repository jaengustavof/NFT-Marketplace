{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _assertThisInitialized = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _slicedToArray = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _require = require('./error'),\n  TimeoutError = _require.TimeoutError,\n  AbortError = _require.AbortError;\n// @ts-expect-error\nvar _require2 = require('../fetch'),\n  Response = _require2.Response,\n  Request = _require2.Request,\n  Headers = _require2.Headers,\n  fetch = _require2.default;\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nvar fetchWithProgress = function fetchWithProgress(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  var timeout = options.timeout,\n    headers = options.headers;\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n  if (headers) {\n    var _iterator = _createForOfIteratorHelper(new Headers(headers)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          name = _step$value[0],\n          value = _step$value[1];\n        request.setRequestHeader(name, value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  if (options.signal) {\n    options.signal.onabort = function () {\n      return request.abort();\n    };\n  }\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer';\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {Event} event\n     */\n    var handleEvent = function handleEvent(event) {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n        default:\n          {\n            break;\n          }\n      }\n    };\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body);\n  });\n};\nvar fetchWithStreaming = fetch;\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nvar fetchWith = function fetchWith(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n};\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nvar parseHeaders = function parseHeaders(input) {\n  var headers = new Headers();\n  var _iterator2 = _createForOfIteratorHelper(input.trim().split(/[\\r\\n]+/)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n      var index = line.indexOf(': ');\n      if (index > 0) {\n        headers.set(line.slice(0, index), line.slice(index + 1));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return headers;\n};\nvar ResponseWithURL = /*#__PURE__*/function (_Response) {\n  _inherits(ResponseWithURL, _Response);\n  var _super = _createSuper(ResponseWithURL);\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  function ResponseWithURL(url, body, options) {\n    var _this;\n    _classCallCheck(this, ResponseWithURL);\n    _this = _super.call(this, body, options);\n    Object.defineProperty(_assertThisInitialized(_this), 'url', {\n      value: url\n    });\n    return _this;\n  }\n  return _createClass(ResponseWithURL);\n}(Response);\nmodule.exports = {\n  fetch: fetchWith,\n  Request: Request,\n  Headers: Headers\n};","map":{"version":3,"names":["_createClass","require","default","_classCallCheck","_assertThisInitialized","_inherits","_createSuper","_slicedToArray","_createForOfIteratorHelper","_require","TimeoutError","AbortError","_require2","Response","Request","Headers","fetch","fetchWithProgress","url","options","arguments","length","undefined","request","XMLHttpRequest","open","method","toString","timeout","headers","Infinity","overrideMimeType","_iterator","_step","s","n","done","_step$value","value","name","setRequestHeader","err","e","f","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","_iterator2","trim","split","_step2","line","index","indexOf","set","slice","_Response","_super","_this","call","Object","defineProperty","module","exports"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-utils/src/http/fetch.browser.js"],"sourcesContent":["'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}