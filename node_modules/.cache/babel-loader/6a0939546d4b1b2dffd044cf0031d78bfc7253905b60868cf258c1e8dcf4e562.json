{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\nconst cid_1 = require(\"multiformats/cid\");\nfunction fromSplit(split) {\n  const [protectedHeader, payload, signature] = split;\n  return {\n    payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\nfunction encodeSignature(signature) {\n  const encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\nfunction encode(jws) {\n  const payload = utils_1.fromBase64url(jws.payload);\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n  const encodedJws = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\nfunction decodeSignature(encoded) {\n  const sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\nfunction decode(encoded) {\n  const decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\nexports.default = {\n  fromSplit,\n  encode,\n  decode\n};","map":{"version":3,"names":["utils_1","require","cid_1","fromSplit","split","protectedHeader","payload","signature","signatures","protected","link","CID","decode","fromBase64url","encodeSignature","encoded","header","encode","jws","e","Error","encodedJws","map","decodeSignature","sign","toBase64url","decoded","Uint8Array","exports","default"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/dag-jose/src/signing.ts"],"sourcesContent":["import { fromBase64url, toBase64url } from './utils'\nimport { CID } from 'multiformats/cid'\n\ninterface JWSSignature {\n  header?: Record<string, any>\n  protected?: string\n  signature: string\n}\n\nexport interface DagJWS {\n  payload: string\n  signatures: Array<JWSSignature>\n  link?: CID\n}\n\ninterface EncodedSignature {\n  header?: Record<string, any>\n  protected?: Uint8Array\n  signature: Uint8Array\n}\n\nexport interface EncodedJWS {\n  payload: Uint8Array\n  signatures: Array<EncodedSignature>\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  controller: string\n  publicKeyHex?: string\n  publicKeyBase64?: string\n}\n\nfunction fromSplit(split: Array<string>): DagJWS {\n  const [protectedHeader, payload, signature] = split\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n    link: CID.decode(fromBase64url(payload)),\n  }\n}\n\nfunction encodeSignature(signature: JWSSignature): EncodedSignature {\n  const encoded: EncodedSignature = {\n    signature: fromBase64url(signature.signature),\n  }\n  if (signature.header) encoded.header = signature.header\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected)\n  return encoded\n}\n\nfunction encode(jws: DagJWS): EncodedJWS {\n  const payload = fromBase64url(jws.payload)\n  try {\n    CID.decode(payload)\n  } catch (e) {\n    throw new Error('Not a valid DagJWS')\n  }\n  const encodedJws: EncodedJWS = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature),\n  }\n  return encodedJws\n}\n\nfunction decodeSignature(encoded: EncodedSignature): JWSSignature {\n  const sign: JWSSignature = {\n    signature: toBase64url(encoded.signature),\n  }\n  if (encoded.header) sign.header = encoded.header\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected)\n  return sign\n}\n\nfunction decode(encoded: EncodedJWS): DagJWS {\n  const decoded: DagJWS = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature),\n  }\n  decoded.link = CID.decode(new Uint8Array(encoded.payload))\n  return decoded\n}\n\nexport default {\n  fromSplit,\n  encode,\n  decode,\n}\n"],"mappings":";;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,KAAA,GAAAD,OAAA;AAiCA,SAASE,SAASA,CAACC,KAAoB;EACrC,MAAM,CAACC,eAAe,EAAEC,OAAO,EAAEC,SAAS,CAAC,GAAGH,KAAK;EACnD,OAAO;IACLE,OAAO;IACPE,UAAU,EAAE,CAAC;MAAEC,SAAS,EAAEJ,eAAe;MAAEE;IAAS,CAAE,CAAC;IACvDG,IAAI,EAAER,KAAA,CAAAS,GAAG,CAACC,MAAM,CAACZ,OAAA,CAAAa,aAAa,CAACP,OAAO,CAAC;GACxC;AACH;AAEA,SAASQ,eAAeA,CAACP,SAAuB;EAC9C,MAAMQ,OAAO,GAAqB;IAChCR,SAAS,EAAEP,OAAA,CAAAa,aAAa,CAACN,SAAS,CAACA,SAAS;GAC7C;EACD,IAAIA,SAAS,CAACS,MAAM,EAAED,OAAO,CAACC,MAAM,GAAGT,SAAS,CAACS,MAAM;EACvD,IAAIT,SAAS,CAACE,SAAS,EAAEM,OAAO,CAACN,SAAS,GAAGT,OAAA,CAAAa,aAAa,CAACN,SAAS,CAACE,SAAS,CAAC;EAC/E,OAAOM,OAAO;AAChB;AAEA,SAASE,MAAMA,CAACC,GAAW;EACzB,MAAMZ,OAAO,GAAGN,OAAA,CAAAa,aAAa,CAACK,GAAG,CAACZ,OAAO,CAAC;EAC1C,IAAI;IACFJ,KAAA,CAAAS,GAAG,CAACC,MAAM,CAACN,OAAO,CAAC;GACpB,CAAC,OAAOa,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;EAEvC,MAAMC,UAAU,GAAe;IAC7Bf,OAAO;IACPE,UAAU,EAAEU,GAAG,CAACV,UAAU,CAACc,GAAG,CAACR,eAAe;GAC/C;EACD,OAAOO,UAAU;AACnB;AAEA,SAASE,eAAeA,CAACR,OAAyB;EAChD,MAAMS,IAAI,GAAiB;IACzBjB,SAAS,EAAEP,OAAA,CAAAyB,WAAW,CAACV,OAAO,CAACR,SAAS;GACzC;EACD,IAAIQ,OAAO,CAACC,MAAM,EAAEQ,IAAI,CAACR,MAAM,GAAGD,OAAO,CAACC,MAAM;EAChD,IAAID,OAAO,CAACN,SAAS,EAAEe,IAAI,CAACf,SAAS,GAAGT,OAAA,CAAAyB,WAAW,CAACV,OAAO,CAACN,SAAS,CAAC;EACtE,OAAOe,IAAI;AACb;AAEA,SAASZ,MAAMA,CAACG,OAAmB;EACjC,MAAMW,OAAO,GAAW;IACtBpB,OAAO,EAAEN,OAAA,CAAAyB,WAAW,CAACV,OAAO,CAACT,OAAO,CAAC;IACrCE,UAAU,EAAEO,OAAO,CAACP,UAAU,CAACc,GAAG,CAACC,eAAe;GACnD;EACDG,OAAO,CAAChB,IAAI,GAAGR,KAAA,CAAAS,GAAG,CAACC,MAAM,CAAC,IAAIe,UAAU,CAACZ,OAAO,CAACT,OAAO,CAAC,CAAC;EAC1D,OAAOoB,OAAO;AAChB;AAEAE,OAAA,CAAAC,OAAA,GAAe;EACb1B,SAAS;EACTc,MAAM;EACNL;CACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}