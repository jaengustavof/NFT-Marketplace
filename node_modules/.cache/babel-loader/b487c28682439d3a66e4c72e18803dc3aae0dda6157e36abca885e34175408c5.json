{"ast":null,"code":"'use strict';\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nvar _regeneratorRuntime = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _awaitAsyncGenerator = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nfunction browserReadableStreamToIt(_x) {\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\nfunction _browserReadableStreamToIt() {\n  _browserReadableStreamToIt = _wrapAsyncGenerator(function (stream) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var reader, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            reader = stream.getReader();\n            _context.prev = 1;\n          case 2:\n            if (!true) {\n              _context.next = 12;\n              break;\n            }\n            _context.next = 5;\n            return _awaitAsyncGenerator(reader.read());\n          case 5:\n            result = _context.sent;\n            if (!result.done) {\n              _context.next = 8;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 8:\n            _context.next = 10;\n            return result.value;\n          case 10:\n            _context.next = 2;\n            break;\n          case 12:\n            _context.prev = 12;\n            if (options.preventCancel !== true) {\n              reader.cancel();\n            }\n            reader.releaseLock();\n            return _context.finish(12);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1,, 12, 16]]);\n    })();\n  });\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\nmodule.exports = browserReadableStreamToIt;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_awaitAsyncGenerator","_wrapAsyncGenerator","browserReadableStreamToIt","_x","_browserReadableStreamToIt","apply","arguments","stream","options","length","undefined","mark","_callee","reader","result","wrap","_callee$","_context","prev","next","getReader","read","sent","done","abrupt","value","preventCancel","cancel","releaseLock","finish","stop","module","exports"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/browser-readablestream-to-it/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAAAA,mBAAA,GAAAC,OAAA,mGAAAC,OAAA;AAAA,IAAAC,oBAAA,GAAAF,OAAA,oGAAAC,OAAA;AAAA,IAAAE,mBAAA,GAAAH,OAAA,mGAAAC,OAAA;AAAA,SAYiBG,yBAAyBA,CAAAC,EAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAH,mBAAA,CAA1C,UAA4CM,MAAM;IAAA,IAAEC,OAAO,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC,CAAC;IAAA,oBAAAT,mBAAA,GAAAc,IAAA,UAAAC,QAAA;MAAA,IAAAC,MAAA,EAAAC,MAAA;MAAA,OAAAjB,mBAAA,GAAAkB,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YACxDN,MAAM,GAAGN,MAAM,CAACa,SAAS,CAAC,CAAC;YAAAH,QAAA,CAAAC,IAAA;UAAA;YAAA,KAGxB,IAAI;cAAAD,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAAAnB,oBAAA,CACYa,MAAM,CAACQ,IAAI,CAAC,CAAC;UAAA;YAA5BP,MAAM,GAAAG,QAAA,CAAAK,IAAA;YAAA,KAERR,MAAM,CAACS,IAAI;cAAAN,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,OAAAF,QAAA,CAAAO,MAAA;UAAA;YAAAP,QAAA,CAAAE,IAAA;YAIf,OAAML,MAAM,CAACW,KAAK;UAAA;YAAAR,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAAF,QAAA,CAAAC,IAAA;YAGpB,IAAIV,OAAO,CAACkB,aAAa,KAAK,IAAI,EAAE;cAClCb,MAAM,CAACc,MAAM,CAAC,CAAC;YACjB;YAEAd,MAAM,CAACe,WAAW,CAAC,CAAC;YAAA,OAAAX,QAAA,CAAAY,MAAA;UAAA;UAAA;YAAA,OAAAZ,QAAA,CAAAa,IAAA;QAAA;MAAA,GAAAlB,OAAA;IAAA;EAAA,CAEvB;EAAA,OAAAR,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEDyB,MAAM,CAACC,OAAO,GAAG9B,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}