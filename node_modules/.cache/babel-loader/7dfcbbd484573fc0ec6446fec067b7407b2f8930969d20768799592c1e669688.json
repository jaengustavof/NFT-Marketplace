{"ast":null,"code":"'use strict';\n\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\nfunction Protocols(proto) {\n  if (typeof proto === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto];\n    }\n    throw new Error('no protocol with code: ' + proto);\n  } else if (typeof proto === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto];\n    }\n    throw new Error('no protocol with name: ' + proto);\n  }\n  throw new Error('invalid protocol id type: ' + proto);\n}\nvar V = -1;\nProtocols.lengthPrefixedVarSize = V;\nProtocols.V = V;\n\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\nProtocols.table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [42, V, 'ip6zone'], [53, V, 'dns', 'resolvable'], [54, V, 'dns4', 'resolvable'], [55, V, 'dns6', 'resolvable'], [56, V, 'dnsaddr', 'resolvable'], [132, 16, 'sctp'], [273, 16, 'udp'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [277, 0, 'p2p-stardust'], [290, 0, 'p2p-circuit'], [301, 0, 'udt'], [302, 0, 'utp'], [400, V, 'unix', false, 'path'],\n// `ipfs` is added before `p2p` for legacy support.\n// All text representations will default to `p2p`, but `ipfs` will\n// still be supported\n[421, V, 'ipfs'],\n// `p2p` is the preferred name for 421, and is now the default\n[421, V, 'p2p'], [443, 0, 'https'], [444, 96, 'onion'], [445, 296, 'onion3'], [446, V, 'garlic64'], [460, 0, 'quic'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [480, 0, 'http'], [777, V, 'memory']];\n/** @type {Record<string,Protocol>} */\nProtocols.names = {};\n/** @type {Record<number,Protocol>} */\nProtocols.codes = {};\n\n// populate tables\nProtocols.table.map(function (row) {\n  var proto = p.apply(null, row);\n  Protocols.codes[proto.code] = proto;\n  Protocols.names[proto.name] = proto;\n  return null;\n});\nProtocols.object = p;\n\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\nfunction p(code, size, name, resolvable, path) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  };\n}\nmodule.exports = Protocols;","map":{"version":3,"names":["Protocols","proto","codes","Error","names","V","lengthPrefixedVarSize","table","map","row","p","apply","code","name","object","size","resolvable","path","Boolean","module","exports"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr/src/protocols-table.js"],"sourcesContent":["'use strict'\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', 'resolvable'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, 'path'],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n/** @type {Record<string,Protocol>} */\nProtocols.names = {}\n/** @type {Record<number,Protocol>} */\nProtocols.codes = {}\n\n// populate tables\nProtocols.table.map(row => {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n  return null\n})\n\nProtocols.object = p\n\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\nfunction p (code, size, name, resolvable, path) {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nmodule.exports = Protocols\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}