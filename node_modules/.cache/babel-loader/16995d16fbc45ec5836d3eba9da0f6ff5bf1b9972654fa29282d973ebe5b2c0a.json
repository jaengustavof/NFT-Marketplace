{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLs = configure(api => {\n  function ls(path) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        if (!path) {\n          throw new Error('ipfs.files.ls requires a path');\n        }\n        const res = await api.post('files/ls', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n            long: true,\n            ...options,\n            stream: true\n          }),\n          headers: options.headers\n        });\n        for await (const result of res.ndjson()) {\n          if ('Entries' in result) {\n            for (const entry of result.Entries || []) {\n              yield toCoreInterface(objectToCamelWithMetadata(entry));\n            }\n          } else {\n            yield toCoreInterface(objectToCamelWithMetadata(result));\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","arguments","length","undefined","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","e","Promise","reject","hash","cid","parse","type"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLs = configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${ path }` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC,SAAgBC,EAAEA,CAACC,IAAI;IAAA;MAAA,IAAEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAAA,0BAAE;QACrC,IAAI,CAACF,IAAI,EAAE;UACT,MAAM,IAAIK,KAAK,CAAC,+BAA+B,CAAC;QAClD;QACA,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,UAAU,EAAE;UACrCC,MAAM,EAAEP,OAAO,CAACO,MAAM;UACtBC,YAAY,EAAEb,iBAAiB,CAAC;YAC9Bc,GAAG,EAAEjB,GAAG,CAACkB,KAAK,CAACX,IAAI,CAAC,GAAI,SAASA,IAAM,EAAC,GAAGA,IAAI;YAC/CY,IAAI,EAAE,IAAI;YACV,GAAGX,OAAO;YACVY,MAAM,EAAE;UACV,CAAC,CAAC;UACFC,OAAO,EAAEb,OAAO,CAACa;QACnB,CAAC,CAAC;QACF,WAAW,MAAMC,MAAM,IAAIT,GAAG,CAACU,MAAM,CAAC,CAAC,EAAE;UACvC,IAAI,SAAS,IAAID,MAAM,EAAE;YACvB,KAAK,MAAME,KAAK,IAAIF,MAAM,CAACG,OAAO,IAAI,EAAE,EAAE;cACxC,MAAMC,eAAe,CAACzB,yBAAyB,CAACuB,KAAK,CAAC,CAAC;YACzD;UACF,CAAC,MAAM;YACL,MAAME,eAAe,CAACzB,yBAAyB,CAACqB,MAAM,CAAC,CAAC;UAC1D;QACF;MACF,CAAC;IAAA,SAAAK,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EACD,OAAOrB,EAAE;AACX,CAAC,CAAC;AACF,SAASoB,eAAeA,CAACF,KAAK,EAAE;EAC9B,IAAIA,KAAK,CAACM,IAAI,EAAE;IACdN,KAAK,CAACO,GAAG,GAAG/B,GAAG,CAACgC,KAAK,CAACR,KAAK,CAACM,IAAI,CAAC;EACnC;EACA,OAAON,KAAK,CAACM,IAAI;EACjBN,KAAK,CAACS,IAAI,GAAGT,KAAK,CAACS,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EACpD,OAAOT,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}