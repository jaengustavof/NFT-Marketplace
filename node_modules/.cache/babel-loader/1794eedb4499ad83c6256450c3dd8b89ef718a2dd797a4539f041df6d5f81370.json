{"ast":null,"code":"import { decode as _decode } from '../decode.js';\nimport { Token, Type } from '../token.js';\nimport { decodeCodePointsArray } from '../byte-utils.js';\nimport { decodeErrPrefix } from '../common.js';\nclass Tokenizer {\n  constructor(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n  done() {\n    return this.pos >= this.data.length;\n  }\n  ch() {\n    return this.data[this.pos];\n  }\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n  skipWhitespace() {\n    let c = this.ch();\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\n      c = this.data[++this.pos];\n    }\n  }\n  expect(str) {\n    if (this.data.length - this.pos < str.length) {\n      throw new Error(`${decodeErrPrefix} unexpected end of input at position ${this.pos}`);\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this.pos++] !== str[i]) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}, expected to find '${String.fromCharCode(...str)}'`);\n      }\n    }\n  }\n  parseNumber() {\n    const startPos = this.pos;\n    let negative = false;\n    let float = false;\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n        if (chars.includes(ch)) {\n          this.pos++;\n        } else {\n          break;\n        }\n      }\n    };\n    if (this.ch() === 45) {\n      negative = true;\n      this.pos++;\n    }\n    if (this.ch() === 48) {\n      this.pos++;\n      if (this.ch() === 46) {\n        this.pos++;\n        float = true;\n      } else {\n        return new Token(Type.uint, 0, this.pos - startPos);\n      }\n    }\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    if (negative && this.pos === startPos + 1) {\n      throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}`);\n    }\n    if (!this.done() && this.ch() === 46) {\n      if (float) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}`);\n      }\n      float = true;\n      this.pos++;\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      float = true;\n      this.pos++;\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        this.pos++;\n      }\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n    const num = parseFloat(numStr);\n    if (float) {\n      return new Token(Type.float, num, this.pos - startPos);\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);\n  }\n  parseString() {\n    if (this.ch() !== 34) {\n      throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}; this shouldn't happen`);\n    }\n    this.pos++;\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n      const ch = this.data[i];\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        break;\n      }\n      if (ch === 34) {\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n        this.pos = i + 1;\n        return new Token(Type.string, str, l);\n      }\n    }\n    const startPos = this.pos;\n    const chars = [];\n    const readu4 = () => {\n      if (this.pos + 4 >= this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected end of unicode escape sequence at position ${this.pos}`);\n      }\n      let u4 = 0;\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n        if (ch >= 48 && ch <= 57) {\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(`${decodeErrPrefix} unexpected unicode escape character at position ${this.pos}`);\n        }\n        u4 = u4 * 16 + ch;\n        this.pos++;\n      }\n      return u4;\n    };\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n      if (this.pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected unicode sequence at position ${this.pos}`);\n      }\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 128) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = this.data[this.pos + 1];\n          if ((secondByte & 192) === 128) {\n            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n            if (tempCodePoint > 127) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n          fourthByte = this.data[this.pos + 3];\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n      if (codePoint === null) {\n        codePoint = 65533;\n        bytesPerSequence = 1;\n      } else if (codePoint > 65535) {\n        codePoint -= 65536;\n        chars.push(codePoint >>> 10 & 1023 | 55296);\n        codePoint = 56320 | codePoint & 1023;\n      }\n      chars.push(codePoint);\n      this.pos += bytesPerSequence;\n    };\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n      switch (ch) {\n        case 92:\n          this.pos++;\n          if (this.done()) {\n            throw new Error(`${decodeErrPrefix} unexpected string termination at position ${this.pos}`);\n          }\n          ch1 = this.ch();\n          this.pos++;\n          switch (ch1) {\n            case 34:\n            case 39:\n            case 92:\n            case 47:\n              chars.push(ch1);\n              break;\n            case 98:\n              chars.push(8);\n              break;\n            case 116:\n              chars.push(9);\n              break;\n            case 110:\n              chars.push(10);\n              break;\n            case 102:\n              chars.push(12);\n              break;\n            case 114:\n              chars.push(13);\n              break;\n            case 117:\n              chars.push(readu4());\n              break;\n            default:\n              throw new Error(`${decodeErrPrefix} unexpected string escape character at position ${this.pos}`);\n          }\n          break;\n        case 34:\n          this.pos++;\n          return new Token(Type.string, decodeCodePointsArray(chars), this.pos - startPos);\n        default:\n          if (ch < 32) {\n            throw new Error(`${decodeErrPrefix} invalid control character at position ${this.pos}`);\n          } else if (ch < 128) {\n            chars.push(ch);\n            this.pos++;\n          } else {\n            readUtf8Char();\n          }\n      }\n    }\n    throw new Error(`${decodeErrPrefix} unexpected end of string at position ${this.pos}`);\n  }\n  parseValue() {\n    switch (this.ch()) {\n      case 123:\n        this.modeStack.push('obj-start');\n        this.pos++;\n        return new Token(Type.map, Infinity, 1);\n      case 91:\n        this.modeStack.push('array-start');\n        this.pos++;\n        return new Token(Type.array, Infinity, 1);\n      case 34:\n        {\n          return this.parseString();\n        }\n      case 110:\n        this.expect([110, 117, 108, 108]);\n        return new Token(Type.null, null, 4);\n      case 102:\n        this.expect([102, 97, 108, 115, 101]);\n        return new Token(Type.false, false, 5);\n      case 116:\n        this.expect([116, 114, 117, 101]);\n        return new Token(Type.true, true, 4);\n      case 45:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        return this.parseNumber();\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}`);\n    }\n  }\n  next() {\n    this.skipWhitespace();\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop();\n        return this.parseValue();\n      case 'array-value':\n        {\n          this.modeStack.pop();\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          if (this.ch() !== 44) {\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`);\n          }\n          this.pos++;\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      case 'array-start':\n        {\n          this.modeStack.pop();\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      case 'obj-key':\n        if (this.ch() === 125) {\n          this.modeStack.pop();\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        if (this.ch() !== 44) {\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`);\n        }\n        this.pos++;\n        this.skipWhitespace();\n      case 'obj-start':\n        {\n          this.modeStack.pop();\n          if (this.ch() === 125) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          const token = this.parseString();\n          this.skipWhitespace();\n          if (this.ch() !== 58) {\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`);\n          }\n          this.pos++;\n          this.modeStack.push('obj-value');\n          return token;\n        }\n      case 'obj-value':\n        {\n          this.modeStack.pop();\n          this.modeStack.push('obj-key');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected parse state at position ${this.pos}; this shouldn't happen`);\n    }\n  }\n}\nfunction decode(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return _decode(data, options);\n}\nexport { decode, Tokenizer };","map":{"version":3,"names":["decode","_decode","Token","Type","decodeCodePointsArray","decodeErrPrefix","Tokenizer","constructor","data","options","arguments","length","undefined","pos","modeStack","lastToken","done","ch","currentMode","skipWhitespace","c","expect","str","Error","i","String","fromCharCode","parseNumber","startPos","negative","float","swallow","chars","includes","uint","numStr","apply","subarray","num","parseFloat","allowBigInt","Number","isSafeInteger","negint","BigInt","parseString","l","string","readu4","u4","readUtf8Char","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","ch1","parseValue","map","Infinity","array","null","false","true","next","pop","break","token","Object","assign","tokenizer"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/cborg/esm/lib/json/decode.js"],"sourcesContent":["import { decode as _decode } from '../decode.js';\nimport {\n  Token,\n  Type\n} from '../token.js';\nimport { decodeCodePointsArray } from '../byte-utils.js';\nimport { decodeErrPrefix } from '../common.js';\nclass Tokenizer {\n  constructor(data, options = {}) {\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n  done() {\n    return this.pos >= this.data.length;\n  }\n  ch() {\n    return this.data[this.pos];\n  }\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n  skipWhitespace() {\n    let c = this.ch();\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\n      c = this.data[++this.pos];\n    }\n  }\n  expect(str) {\n    if (this.data.length - this.pos < str.length) {\n      throw new Error(`${ decodeErrPrefix } unexpected end of input at position ${ this.pos }`);\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this.pos++] !== str[i]) {\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }, expected to find '${ String.fromCharCode(...str) }'`);\n      }\n    }\n  }\n  parseNumber() {\n    const startPos = this.pos;\n    let negative = false;\n    let float = false;\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n        if (chars.includes(ch)) {\n          this.pos++;\n        } else {\n          break;\n        }\n      }\n    };\n    if (this.ch() === 45) {\n      negative = true;\n      this.pos++;\n    }\n    if (this.ch() === 48) {\n      this.pos++;\n      if (this.ch() === 46) {\n        this.pos++;\n        float = true;\n      } else {\n        return new Token(Type.uint, 0, this.pos - startPos);\n      }\n    }\n    swallow([\n      48,\n      49,\n      50,\n      51,\n      52,\n      53,\n      54,\n      55,\n      56,\n      57\n    ]);\n    if (negative && this.pos === startPos + 1) {\n      throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\n    }\n    if (!this.done() && this.ch() === 46) {\n      if (float) {\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\n      }\n      float = true;\n      this.pos++;\n      swallow([\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57\n      ]);\n    }\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      float = true;\n      this.pos++;\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        this.pos++;\n      }\n      swallow([\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57\n      ]);\n    }\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n    const num = parseFloat(numStr);\n    if (float) {\n      return new Token(Type.float, num, this.pos - startPos);\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);\n  }\n  parseString() {\n    if (this.ch() !== 34) {\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }; this shouldn't happen`);\n    }\n    this.pos++;\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n      const ch = this.data[i];\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        break;\n      }\n      if (ch === 34) {\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n        this.pos = i + 1;\n        return new Token(Type.string, str, l);\n      }\n    }\n    const startPos = this.pos;\n    const chars = [];\n    const readu4 = () => {\n      if (this.pos + 4 >= this.data.length) {\n        throw new Error(`${ decodeErrPrefix } unexpected end of unicode escape sequence at position ${ this.pos }`);\n      }\n      let u4 = 0;\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n        if (ch >= 48 && ch <= 57) {\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(`${ decodeErrPrefix } unexpected unicode escape character at position ${ this.pos }`);\n        }\n        u4 = u4 * 16 + ch;\n        this.pos++;\n      }\n      return u4;\n    };\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n      if (this.pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${ decodeErrPrefix } unexpected unicode sequence at position ${ this.pos }`);\n      }\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n      case 1:\n        if (firstByte < 128) {\n          codePoint = firstByte;\n        }\n        break;\n      case 2:\n        secondByte = this.data[this.pos + 1];\n        if ((secondByte & 192) === 128) {\n          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n          if (tempCodePoint > 127) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 3:\n        secondByte = this.data[this.pos + 1];\n        thirdByte = this.data[this.pos + 2];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 4:\n        secondByte = this.data[this.pos + 1];\n        thirdByte = this.data[this.pos + 2];\n        fourthByte = this.data[this.pos + 3];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n            codePoint = tempCodePoint;\n          }\n        }\n      }\n      if (codePoint === null) {\n        codePoint = 65533;\n        bytesPerSequence = 1;\n      } else if (codePoint > 65535) {\n        codePoint -= 65536;\n        chars.push(codePoint >>> 10 & 1023 | 55296);\n        codePoint = 56320 | codePoint & 1023;\n      }\n      chars.push(codePoint);\n      this.pos += bytesPerSequence;\n    };\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n      switch (ch) {\n      case 92:\n        this.pos++;\n        if (this.done()) {\n          throw new Error(`${ decodeErrPrefix } unexpected string termination at position ${ this.pos }`);\n        }\n        ch1 = this.ch();\n        this.pos++;\n        switch (ch1) {\n        case 34:\n        case 39:\n        case 92:\n        case 47:\n          chars.push(ch1);\n          break;\n        case 98:\n          chars.push(8);\n          break;\n        case 116:\n          chars.push(9);\n          break;\n        case 110:\n          chars.push(10);\n          break;\n        case 102:\n          chars.push(12);\n          break;\n        case 114:\n          chars.push(13);\n          break;\n        case 117:\n          chars.push(readu4());\n          break;\n        default:\n          throw new Error(`${ decodeErrPrefix } unexpected string escape character at position ${ this.pos }`);\n        }\n        break;\n      case 34:\n        this.pos++;\n        return new Token(Type.string, decodeCodePointsArray(chars), this.pos - startPos);\n      default:\n        if (ch < 32) {\n          throw new Error(`${ decodeErrPrefix } invalid control character at position ${ this.pos }`);\n        } else if (ch < 128) {\n          chars.push(ch);\n          this.pos++;\n        } else {\n          readUtf8Char();\n        }\n      }\n    }\n    throw new Error(`${ decodeErrPrefix } unexpected end of string at position ${ this.pos }`);\n  }\n  parseValue() {\n    switch (this.ch()) {\n    case 123:\n      this.modeStack.push('obj-start');\n      this.pos++;\n      return new Token(Type.map, Infinity, 1);\n    case 91:\n      this.modeStack.push('array-start');\n      this.pos++;\n      return new Token(Type.array, Infinity, 1);\n    case 34: {\n        return this.parseString();\n      }\n    case 110:\n      this.expect([\n        110,\n        117,\n        108,\n        108\n      ]);\n      return new Token(Type.null, null, 4);\n    case 102:\n      this.expect([\n        102,\n        97,\n        108,\n        115,\n        101\n      ]);\n      return new Token(Type.false, false, 5);\n    case 116:\n      this.expect([\n        116,\n        114,\n        117,\n        101\n      ]);\n      return new Token(Type.true, true, 4);\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return this.parseNumber();\n    default:\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }`);\n    }\n  }\n  next() {\n    this.skipWhitespace();\n    switch (this.currentMode()) {\n    case 'value':\n      this.modeStack.pop();\n      return this.parseValue();\n    case 'array-value': {\n        this.modeStack.pop();\n        if (this.ch() === 93) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        if (this.ch() !== 44) {\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting array delimiter but found '${ String.fromCharCode(this.ch()) }'`);\n        }\n        this.pos++;\n        this.modeStack.push('array-value');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    case 'array-start': {\n        this.modeStack.pop();\n        if (this.ch() === 93) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        this.modeStack.push('array-value');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    case 'obj-key':\n      if (this.ch() === 125) {\n        this.modeStack.pop();\n        this.pos++;\n        this.skipWhitespace();\n        return new Token(Type.break, undefined, 1);\n      }\n      if (this.ch() !== 44) {\n        throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting object delimiter but found '${ String.fromCharCode(this.ch()) }'`);\n      }\n      this.pos++;\n      this.skipWhitespace();\n    case 'obj-start': {\n        this.modeStack.pop();\n        if (this.ch() === 125) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        const token = this.parseString();\n        this.skipWhitespace();\n        if (this.ch() !== 58) {\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting key/value delimiter ':' but found '${ String.fromCharCode(this.ch()) }'`);\n        }\n        this.pos++;\n        this.modeStack.push('obj-value');\n        return token;\n      }\n    case 'obj-value': {\n        this.modeStack.pop();\n        this.modeStack.push('obj-key');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    default:\n      throw new Error(`${ decodeErrPrefix } unexpected parse state at position ${ this.pos }; this shouldn't happen`);\n    }\n  }\n}\nfunction decode(data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options);\n  return _decode(data, options);\n}\nexport {\n  decode,\n  Tokenizer\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}