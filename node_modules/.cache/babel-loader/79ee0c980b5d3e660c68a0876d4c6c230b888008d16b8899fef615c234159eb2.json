{"ast":null,"code":"import _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as Digest from './digest.js';\nexport var from = function from(_ref) {\n  var name = _ref.name,\n    code = _ref.code,\n    encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\nexport var Hasher = /*#__PURE__*/function () {\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function digest(input) {\n      var _this = this;\n      if (input instanceof Uint8Array) {\n        var result = this.encode(input);\n        return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(function (digest) {\n          return Digest.create(_this.code, digest);\n        });\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n  return Hasher;\n}();","map":{"version":3,"names":["Digest","from","_ref","name","code","encode","Hasher","_classCallCheck","_createClass","key","value","digest","input","_this","Uint8Array","result","create","then","Error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiformats/esm/src/hashes/hasher.js"],"sourcesContent":["import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}"],"mappings":";;AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AACrC,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAAC,IAAA;EAAA,IAAKC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;EAAA,OAAM,IAAIC,MAAM,CAACH,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;AAAA;AAC5E,WAAaC,MAAM;EACjB,SAAAA,OAAYH,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAAAE,eAAA,OAAAD,MAAA;IAC9B,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAACG,YAAA,CAAAF,MAAA;IAAAG,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,KAAA;MACZ,IAAID,KAAK,YAAYE,UAAU,EAAE;QAC/B,IAAMC,MAAM,GAAG,IAAI,CAACV,MAAM,CAACO,KAAK,CAAC;QACjC,OAAOG,MAAM,YAAYD,UAAU,GAAGd,MAAM,CAACgB,MAAM,CAAC,IAAI,CAACZ,IAAI,EAAEW,MAAM,CAAC,GAAGA,MAAM,CAACE,IAAI,CAAC,UAAAN,MAAM;UAAA,OAAIX,MAAM,CAACgB,MAAM,CAACH,KAAI,CAACT,IAAI,EAAEO,MAAM,CAAC;QAAA,EAAC;MAClI,CAAC,MAAM;QACL,MAAMO,KAAK,CAAC,mCAAmC,CAAC;MAClD;IACF;EAAC;EAAA,OAAAZ,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}