{"ast":null,"code":"'use strict';\n\nconst {\n  TimeoutError,\n  AbortError\n} = require('./error');\n// @ts-expect-error\nconst {\n  Response,\n  Request,\n  Headers,\n  default: fetch\n} = require('../fetch');\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  const {\n    timeout,\n    headers\n  } = options;\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value);\n    }\n  }\n  if (options.signal) {\n    options.signal.onabort = () => request.abort();\n  }\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer';\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n        default:\n          {\n            break;\n          }\n      }\n    };\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body);\n  });\n};\nconst fetchWithStreaming = fetch;\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n};\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = input => {\n  const headers = new Headers();\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n  return headers;\n};\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n}\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n};","map":{"version":3,"names":["TimeoutError","AbortError","require","Response","Request","Headers","default","fetch","fetchWithProgress","url","options","arguments","length","undefined","request","XMLHttpRequest","open","method","toString","timeout","headers","Infinity","overrideMimeType","name","value","setRequestHeader","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","line","trim","split","index","indexOf","set","slice","constructor","Object","defineProperty","module","exports"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-utils/src/http/fetch.browser.js"],"sourcesContent":["'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}