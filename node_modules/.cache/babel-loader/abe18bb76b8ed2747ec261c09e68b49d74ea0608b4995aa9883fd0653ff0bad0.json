{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(await multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["CID","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","arguments","length","undefined","settings","storeCodec","hashAlg","serialized","inputCodec","Uint8Array","Error","getCodec","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/dag/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...await multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAO,MAAMC,SAAS,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EAC5C,MAAMC,EAAE,GAAGP,SAAS,CAACQ,GAAG,IAAI;IAC1B,MAAMC,GAAG,GAAG,eAAAA,CAAOC,OAAO,EAAmB;MAAA,IAAjBJ,OAAO,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MACtC,MAAMG,QAAQ,GAAG;QACfC,UAAU,EAAE,UAAU;QACtBC,OAAO,EAAE,UAAU;QACnB,GAAGV;MACL,CAAC;MACD,IAAIW,UAAU;MACd,IAAIH,QAAQ,CAACI,UAAU,EAAE;QACvB,IAAI,EAAER,OAAO,YAAYS,UAAU,CAAC,EAAE;UACpC,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;QACzE;QACAH,UAAU,GAAGP,OAAO;MACtB,CAAC,MAAM;QACL,MAAMK,UAAU,GAAG,MAAMV,MAAM,CAACgB,QAAQ,CAACP,QAAQ,CAACC,UAAU,CAAC;QAC7DE,UAAU,GAAGF,UAAU,CAACO,MAAM,CAACZ,OAAO,CAAC;QACvCI,QAAQ,CAACI,UAAU,GAAGJ,QAAQ,CAACC,UAAU;MAC3C;MACA,MAAMQ,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,MAAM,GAAGtB,WAAW,CAACoB,UAAU,CAACE,MAAM,EAAEX,QAAQ,CAACW,MAAM,CAAC;MAC9D,MAAMC,GAAG,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,SAAS,EAAE;QACpCC,OAAO,EAAEd,QAAQ,CAACc,OAAO;QACzBH,MAAM;QACNI,YAAY,EAAE3B,iBAAiB,CAACY,QAAQ,CAAC;QACzC,IAAG,MAAMb,gBAAgB,CAAC,CAACgB,UAAU,CAAC,EAAEM,UAAU,EAAET,QAAQ,CAACgB,OAAO,CAAC;MACvE,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7B,OAAOjC,GAAG,CAACkC,KAAK,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IACD,OAAOzB,GAAG;EACZ,CAAC,CAAC;EACF,OAAOF,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}