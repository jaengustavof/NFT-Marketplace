{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar LOAD_BASE = function LOAD_BASE(name) {\n  return Promise.reject(new Error(\"No base found for \\\"\".concat(name, \"\\\"\")));\n};\nexport var Multibases = /*#__PURE__*/function () {\n  function Multibases(options) {\n    _classCallCheck(this, Multibases);\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    var _iterator = _createForOfIteratorHelper(options.bases),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var base = _step.value;\n        this.addBase(base);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  _createClass(Multibases, [{\n    key: \"addBase\",\n    value: function addBase(base) {\n      if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n        throw new Error(\"Codec already exists for codec \\\"\".concat(base.name, \"\\\"\"));\n      }\n      this._basesByName[base.name] = base;\n      this._basesByPrefix[base.prefix] = base;\n    }\n  }, {\n    key: \"removeBase\",\n    value: function removeBase(base) {\n      delete this._basesByName[base.name];\n      delete this._basesByPrefix[base.prefix];\n    }\n  }, {\n    key: \"getBase\",\n    value: function () {\n      var _getBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(nameOrPrefix) {\n        var base;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._basesByName[nameOrPrefix]) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", this._basesByName[nameOrPrefix]);\n            case 2:\n              if (!this._basesByPrefix[nameOrPrefix]) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", this._basesByPrefix[nameOrPrefix]);\n            case 4:\n              _context.next = 6;\n              return this._loadBase(nameOrPrefix);\n            case 6:\n              base = _context.sent;\n              if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n                this.addBase(base);\n              }\n              return _context.abrupt(\"return\", base);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getBase(_x) {\n        return _getBase.apply(this, arguments);\n      }\n      return getBase;\n    }()\n  }, {\n    key: \"listBases\",\n    value: function listBases() {\n      return Object.values(this._basesByName);\n    }\n  }]);\n  return Multibases;\n}();","map":{"version":3,"names":["LOAD_BASE","name","Promise","reject","Error","concat","Multibases","options","_classCallCheck","_basesByName","_basesByPrefix","_loadBase","loadBase","_iterator","_createForOfIteratorHelper","bases","_step","s","n","done","base","value","addBase","err","e","f","_createClass","key","prefix","removeBase","_getBase","_asyncToGenerator","_regeneratorRuntime","mark","_callee","nameOrPrefix","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getBase","_x","apply","arguments","listBases","Object","values"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-core-utils/esm/src/multibases.js"],"sourcesContent":["const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}