{"ast":null,"code":"const {\n  Multiaddr\n} = require('multiaddr');\nconst reduceValue = (_, v) => v;\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`;\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp';\n  let explicitPort = `:${port}`;\n  const last = parts[parts.length - 1];\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n  return `${protocol}://${str}${explicitPort}`;\n};\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : `[${content}]`,\n  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n};\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr);\n  const parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(tuple => ({\n    protocol: parts.shift(),\n    content: tuple[1] ? parts.shift() : null\n  })).reduce((str, part, i, parts) => {\n    const reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`);\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":{"version":3,"names":["Multiaddr","require","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","module","exports","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/multiaddr-to-uri/index.js"],"sourcesContent":["const { Multiaddr } = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}