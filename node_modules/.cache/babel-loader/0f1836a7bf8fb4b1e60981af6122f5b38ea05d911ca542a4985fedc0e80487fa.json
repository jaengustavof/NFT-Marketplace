{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  function rmAll(source) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        for await (const {\n          path,\n          recursive\n        } of normaliseInput(source)) {\n          const searchParams = new URLSearchParams(options.searchParams);\n          searchParams.append('arg', `${path}`);\n          if (recursive != null) searchParams.set('recursive', String(recursive));\n          const res = await api.post('pin/rm', {\n            signal: options.signal,\n            headers: options.headers,\n            searchParams: toUrlSearchParams({\n              ...options,\n              arg: `${path}`,\n              recursive\n            })\n          });\n          for await (const pin of res.ndjson()) {\n            if (pin.Pins) {\n              yield* pin.Pins.map(cid => CID.parse(cid));\n              continue;\n            }\n            yield CID.parse(pin);\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","arguments","length","undefined","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse","e","Promise","reject"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  async function* rmAll(source, options = {}) {\n    for await (const {path, recursive} of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${ path }`);\n      if (recursive != null)\n        searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${ path }`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return rmAll;\n});"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C,SAAgBC,KAAKA,CAACC,MAAM;IAAA;MAAA,IAAEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAAA,0BAAE;QAC1C,WAAW,MAAM;UAACG,IAAI;UAAEC;QAAS,CAAC,IAAIX,cAAc,CAACK,MAAM,CAAC,EAAE;UAC5D,MAAMO,YAAY,GAAG,IAAIC,eAAe,CAACP,OAAO,CAACM,YAAY,CAAC;UAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,EAAG,GAAGJ,IAAM,EAAC,CAAC;UACvC,IAAIC,SAAS,IAAI,IAAI,EACnBC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;UAClD,MAAMM,GAAG,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,QAAQ,EAAE;YACnCC,MAAM,EAAEb,OAAO,CAACa,MAAM;YACtBC,OAAO,EAAEd,OAAO,CAACc,OAAO;YACxBR,YAAY,EAAEX,iBAAiB,CAAC;cAC9B,GAAGK,OAAO;cACVe,GAAG,EAAG,GAAGX,IAAM,EAAC;cAChBC;YACF,CAAC;UACH,CAAC,CAAC;UACF,WAAW,MAAMW,GAAG,IAAIL,GAAG,CAACM,MAAM,CAAC,CAAC,EAAE;YACpC,IAAID,GAAG,CAACE,IAAI,EAAE;cACZ,OAAOF,GAAG,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI5B,GAAG,CAAC6B,KAAK,CAACD,GAAG,CAAC,CAAC;cAC1C;YACF;YACA,MAAM5B,GAAG,CAAC6B,KAAK,CAACL,GAAG,CAAC;UACtB;QACF;MACF,CAAC;IAAA,SAAAM,CAAA;MAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;IAAA;EAAA;EACD,OAAOxB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}