{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport const decodePin = _ref => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\nexport const encodeQuery = _ref2 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref2;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nexport const encodeAddParams = _ref3 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref3;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};","map":{"version":3,"names":["CID","toUrlSearchParams","decodePin","_ref","Name","name","Status","status","Cid","cid","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","_ref2","all","query","force","undefined","value","append","encodeAddParams","_ref3","background","origins","params","arg","origin"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/pin/remote/utils.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport const decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid\n}) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${ typeof cid }`);\n  }\n};\nexport const encodeQuery = ({service, cid, name, status, all}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nexport const encodeAddParams = ({cid, service, background, name, origins}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,OAAO,MAAMC,SAAS,GAAGC,IAAA,IAInB;EAAA,IAJoB;IACxBC,IAAI,EAAEC,IAAI;IACVC,MAAM,EAAEC,MAAM;IACdC,GAAG,EAAEC;EACP,CAAC,GAAAN,IAAA;EACC,OAAO;IACLM,GAAG,EAAET,GAAG,CAACU,KAAK,CAACD,GAAG,CAAC;IACnBJ,IAAI;IACJE;EACF,CAAC;AACH,CAAC;AACD,OAAO,MAAMI,aAAa,GAAGC,OAAO,IAAI;EACtC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,EAAE,EAAE;IACjD,OAAOA,OAAO;EAChB,CAAC,MAAM;IACL,MAAM,IAAIC,SAAS,CAAC,6BAA6B,CAAC;EACpD;AACF,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGL,GAAG,IAAI;EAC9B,IAAIT,GAAG,CAACe,KAAK,CAACN,GAAG,CAAC,EAAE;IAClB,OAAOA,GAAG,CAACO,QAAQ,CAAC,CAAC;EACvB,CAAC,MAAM;IACL,MAAM,IAAIH,SAAS,CAAE,oCAAoC,OAAOJ,GAAK,EAAC,CAAC;EACzE;AACF,CAAC;AACD,OAAO,MAAMQ,WAAW,GAAGC,KAAA,IAAuC;EAAA,IAAtC;IAACN,OAAO;IAAEH,GAAG;IAAEJ,IAAI;IAAEE,MAAM;IAAEY;EAAG,CAAC,GAAAD,KAAA;EAC3D,MAAME,KAAK,GAAGnB,iBAAiB,CAAC;IAC9BW,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BP,IAAI;IACJgB,KAAK,EAAEF,GAAG,GAAG,IAAI,GAAGG;EACtB,CAAC,CAAC;EACF,IAAIb,GAAG,EAAE;IACP,KAAK,MAAMc,KAAK,IAAId,GAAG,EAAE;MACvBW,KAAK,CAACI,MAAM,CAAC,KAAK,EAAEV,SAAS,CAACS,KAAK,CAAC,CAAC;IACvC;EACF;EACA,IAAIhB,MAAM,EAAE;IACV,KAAK,MAAMgB,KAAK,IAAIhB,MAAM,EAAE;MAC1Ba,KAAK,CAACI,MAAM,CAAC,QAAQ,EAAED,KAAK,CAAC;IAC/B;EACF;EACA,OAAOH,KAAK;AACd,CAAC;AACD,OAAO,MAAMK,eAAe,GAAGC,KAAA,IAA+C;EAAA,IAA9C;IAACjB,GAAG;IAAEG,OAAO;IAAEe,UAAU;IAAEtB,IAAI;IAAEuB;EAAO,CAAC,GAAAF,KAAA;EACvE,MAAMG,MAAM,GAAG5B,iBAAiB,CAAC;IAC/B6B,GAAG,EAAEhB,SAAS,CAACL,GAAG,CAAC;IACnBG,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BP,IAAI;IACJsB,UAAU,EAAEA,UAAU,GAAG,IAAI,GAAGL;EAClC,CAAC,CAAC;EACF,IAAIM,OAAO,EAAE;IACX,KAAK,MAAMG,MAAM,IAAIH,OAAO,EAAE;MAC5BC,MAAM,CAACL,MAAM,CAAC,QAAQ,EAAEO,MAAM,CAACf,QAAQ,CAAC,CAAC,CAAC;IAC5C;EACF;EACA,OAAOa,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}