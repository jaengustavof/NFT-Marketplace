{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0'); //nodo infura para conectar cliente IPFS\n\nconst Create = _ref => {\n  _s();\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList();\n    } catch (error) {\n      console.log(\"ipfs URI upload error: \", error);\n    }\n  };\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/${result.path}`;\n  };\n};\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Create","_ref","_s","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","mintThenList","uri","_c","$RefreshReg$"],"sources":["/home/gustavo/blockchain/Marketplace/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0'); //nodo infura para conectar cliente IPFS\n\nconst Create = ({ marketplace, nft }) => {\n\n    const [image, setImage] = useState('');\n    const [price, setPrice] = useState(null);\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const uploadToIPFS = async (event) =>{\n        event.preventDefault();\n        const file = event.target.files[0];\n        if(typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file);\n                console.log(result);\n                setImage(`https://ipfs.infura.io/${result.path}`);\n            } catch (error) {\n                console.log(\"ipfs image upload error: \", error);\n                \n            }\n        }\n    }\n\n    const createNFT = async () => {\n        if(!image || !price || !name || !description) return;\n\n        try {\n\n            const result = await client.add(JSON.stringify({ image, price, name, description }));\n            mintThenList();\n\n        } catch (error) {\n            \n            console.log(\"ipfs URI upload error: \", error);\n\n        }\n    }\n\n    const mintThenList = async (result) =>{\n\n        const uri = `https://ipfs.infura.io/${result.path}`\n    }\n\n}\n\nexport default Create;\n\n\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AACnD,SAASC,MAAM,IAAIC,cAAc,QAAQ,kBAAkB;AAE3D,MAAMC,MAAM,GAAGD,cAAc,CAAC,oCAAoC,CAAC,CAAC,CAAC;;AAErE,MAAME,MAAM,GAAGC,IAAA,IAA0B;EAAAC,EAAA;EAAA,IAAzB;IAAEC,WAAW;IAAEC;EAAI,CAAC,GAAAH,IAAA;EAEhC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMqB,YAAY,GAAG,MAAOC,KAAK,IAAI;IACjCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAG,OAAOF,IAAI,KAAK,WAAW,EAAE;MAC5B,IAAI;QACA,MAAMG,MAAM,GAAG,MAAMpB,MAAM,CAACqB,GAAG,CAACJ,IAAI,CAAC;QACrCK,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QACnBb,QAAQ,CAAE,0BAAyBa,MAAM,CAACI,IAAK,EAAC,CAAC;MACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZH,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEE,KAAK,CAAC;MAEnD;IACJ;EACJ,CAAC;EAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAG,CAACpB,KAAK,IAAI,CAACE,KAAK,IAAI,CAACE,IAAI,IAAI,CAACE,WAAW,EAAE;IAE9C,IAAI;MAEA,MAAMQ,MAAM,GAAG,MAAMpB,MAAM,CAACqB,GAAG,CAACM,IAAI,CAACC,SAAS,CAAC;QAAEtB,KAAK;QAAEE,KAAK;QAAEE,IAAI;QAAEE;MAAY,CAAC,CAAC,CAAC;MACpFiB,YAAY,CAAC,CAAC;IAElB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAEZH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEE,KAAK,CAAC;IAEjD;EACJ,CAAC;EAED,MAAMI,YAAY,GAAG,MAAOT,MAAM,IAAI;IAElC,MAAMU,GAAG,GAAI,0BAAyBV,MAAM,CAACI,IAAK,EAAC;EACvD,CAAC;AAEL,CAAC;AAAArB,EAAA,CA1CKF,MAAM;AAAA8B,EAAA,GAAN9B,MAAM;AA4CZ,eAAeA,MAAM;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}