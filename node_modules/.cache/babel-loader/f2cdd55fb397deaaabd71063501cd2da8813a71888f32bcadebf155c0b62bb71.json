{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createSet = configure(function (api) {\n  var set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, value) {\n      var options,\n        params,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            if (!(typeof key !== 'string')) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error('Invalid key type');\n          case 3:\n            params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n            _context.next = 6;\n            return api.post('config', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(params),\n              headers: options.headers\n            });\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.text();\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return set;\n});\nvar encodeParam = function encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","toUrlSearchParams","createSet","api","set","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","key","value","options","params","res","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","Error","_objectSpread","encodeParam","post","signal","searchParams","headers","sent","text","stop","_x","_x2","apply","arg","toString","bool","JSON","stringify","json"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/config/set.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,OAAO,IAAMC,SAAS,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EACxC,IAAMC,GAAG;IAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,GAAG,EAAEC,KAAK;MAAA,IAAAC,OAAA;QAAAC,MAAA;QAAAC,GAAA;QAAAC,KAAA,GAAAC,SAAA;MAAA,OAAAT,mBAAA,GAAAU,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAET,OAAO,GAAAG,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAG,CAAC,CAAC;YAAA,MACrC,OAAOL,GAAG,KAAK,QAAQ;cAAAS,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,MACnB,IAAIG,KAAK,CAAC,kBAAkB,CAAC;UAAA;YAE/BX,MAAM,GAAAY,aAAA,CAAAA,aAAA,KACPb,OAAO,GACPc,WAAW,CAAChB,GAAG,EAAEC,KAAK,CAAC;YAAAQ,QAAA,CAAAE,IAAA;YAAA,OAEVlB,GAAG,CAACwB,IAAI,CAAC,QAAQ,EAAE;cACnCC,MAAM,EAAEhB,OAAO,CAACgB,MAAM;cACtBC,YAAY,EAAE5B,iBAAiB,CAACY,MAAM,CAAC;cACvCiB,OAAO,EAAElB,OAAO,CAACkB;YACnB,CAAC,CAAC;UAAA;YAJIhB,GAAG,GAAAK,QAAA,CAAAY,IAAA;YAAAZ,QAAA,CAAAE,IAAA;YAAA,OAKHP,GAAG,CAACkB,IAAI,CAAC,CAAC;UAAA;UAAA;YAAA,OAAAb,QAAA,CAAAc,IAAA;QAAA;MAAA,GAAAxB,OAAA;IAAA,CACjB;IAAA,gBAdKL,GAAGA,CAAA8B,EAAA,EAAAC,GAAA;MAAA,OAAA9B,IAAA,CAAA+B,KAAA,OAAApB,SAAA;IAAA;EAAA,GAcR;EACD,OAAOZ,GAAG;AACZ,CAAC,CAAC;AACF,IAAMsB,WAAW,GAAG,SAAdA,WAAWA,CAAIhB,GAAG,EAAEC,KAAK,EAAK;EAClC,QAAQ,OAAOA,KAAK;IACpB,KAAK,SAAS;MACZ,OAAO;QACL0B,GAAG,EAAE,CACH3B,GAAG,EACHC,KAAK,CAAC2B,QAAQ,CAAC,CAAC,CACjB;QACDC,IAAI,EAAE;MACR,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLF,GAAG,EAAE,CACH3B,GAAG,EACHC,KAAK;MAET,CAAC;IACH;MACE,OAAO;QACL0B,GAAG,EAAE,CACH3B,GAAG,EACH8B,IAAI,CAACC,SAAS,CAAC9B,KAAK,CAAC,CACtB;QACD+B,IAAI,EAAE;MACR,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}