{"ast":null,"code":"import _regeneratorRuntime from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/home/gustavo/blockchain/Marketplace/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createLs = configure(function (api) {\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function (path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, result, _iterator2, _step2, entry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (path) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('ipfs.files.ls requires a path');\n            case 2:\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 4:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 38;\n                break;\n              }\n              result = _step.value;\n              if (!('Entries' in result)) {\n                _context.next = 33;\n                break;\n              }\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 15;\n              _iterator2.s();\n            case 17:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 23;\n                break;\n              }\n              entry = _step2.value;\n              _context.next = 21;\n              return toCoreInterface(objectToCamelWithMetadata(entry));\n            case 21:\n              _context.next = 17;\n              break;\n            case 23:\n              _context.next = 28;\n              break;\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](15);\n              _iterator2.e(_context.t0);\n            case 28:\n              _context.prev = 28;\n              _iterator2.f();\n              return _context.finish(28);\n            case 31:\n              _context.next = 35;\n              break;\n            case 33:\n              _context.next = 35;\n              return toCoreInterface(objectToCamelWithMetadata(result));\n            case 35:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n            case 38:\n              _context.next = 44;\n              break;\n            case 40:\n              _context.prev = 40;\n              _context.t1 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 44:\n              _context.prev = 44;\n              _context.prev = 45;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 49;\n                break;\n              }\n              _context.next = 49;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 49:\n              _context.prev = 49;\n              if (!_didIteratorError) {\n                _context.next = 52;\n                break;\n              }\n              throw _iteratorError;\n            case 52:\n              return _context.finish(49);\n            case 53:\n              return _context.finish(44);\n            case 54:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 40, 44, 54], [15, 25, 28, 31], [45,, 49, 53]]);\n      })();\n    });\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","_x","_ls","apply","arguments","_wrapAsyncGenerator","path","options","length","undefined","_regeneratorRuntime","mark","_callee","res","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","result","_iterator2","_step2","entry","wrap","_callee$","_context","prev","next","Error","_awaitAsyncGenerator","post","signal","searchParams","_objectSpread","arg","asCID","concat","long","stream","headers","sent","_asyncIterator","ndjson","done","value","_createForOfIteratorHelper","Entries","s","n","toCoreInterface","t0","e","f","finish","t1","return","stop","hash","cid","parse","type"],"sources":["/home/gustavo/blockchain/Marketplace/node_modules/ipfs-http-client/esm/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLs = configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${ path }` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}